// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package kafkatlscertmgmt

import (
	"context"
	"sync"
)

// Ensure, that certMagicClientWrapperMock does implement certMagicClientWrapper.
// If this is not the case, regenerate this file with moq.
var _ certMagicClientWrapper = &certMagicClientWrapperMock{}

// certMagicClientWrapperMock is a mock implementation of certMagicClientWrapper.
//
//	func TestSomethingThatUsescertMagicClientWrapper(t *testing.T) {
//
//		// make and configure a mocked certMagicClientWrapper
//		mockedcertMagicClientWrapper := &certMagicClientWrapperMock{
//			GetCerticateRefsFunc: func(domain string) CertificateManagementOutput {
//				panic("mock out the GetCerticateRefs method")
//			},
//			ManageCertificateFunc: func(ctx context.Context, domainNames []string) error {
//				panic("mock out the ManageCertificate method")
//			},
//			RevokeCertificateFunc: func(ctx context.Context, domain string, reason int) error {
//				panic("mock out the RevokeCertificate method")
//			},
//		}
//
//		// use mockedcertMagicClientWrapper in code that requires certMagicClientWrapper
//		// and then make assertions.
//
//	}
type certMagicClientWrapperMock struct {
	// GetCerticateRefsFunc mocks the GetCerticateRefs method.
	GetCerticateRefsFunc func(domain string) CertificateManagementOutput

	// ManageCertificateFunc mocks the ManageCertificate method.
	ManageCertificateFunc func(ctx context.Context, domainNames []string) error

	// RevokeCertificateFunc mocks the RevokeCertificate method.
	RevokeCertificateFunc func(ctx context.Context, domain string, reason int) error

	// calls tracks calls to the methods.
	calls struct {
		// GetCerticateRefs holds details about calls to the GetCerticateRefs method.
		GetCerticateRefs []struct {
			// Domain is the domain argument value.
			Domain string
		}
		// ManageCertificate holds details about calls to the ManageCertificate method.
		ManageCertificate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DomainNames is the domainNames argument value.
			DomainNames []string
		}
		// RevokeCertificate holds details about calls to the RevokeCertificate method.
		RevokeCertificate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Domain is the domain argument value.
			Domain string
			// Reason is the reason argument value.
			Reason int
		}
	}
	lockGetCerticateRefs  sync.RWMutex
	lockManageCertificate sync.RWMutex
	lockRevokeCertificate sync.RWMutex
}

// GetCerticateRefs calls GetCerticateRefsFunc.
func (mock *certMagicClientWrapperMock) GetCerticateRefs(domain string) CertificateManagementOutput {
	if mock.GetCerticateRefsFunc == nil {
		panic("certMagicClientWrapperMock.GetCerticateRefsFunc: method is nil but certMagicClientWrapper.GetCerticateRefs was just called")
	}
	callInfo := struct {
		Domain string
	}{
		Domain: domain,
	}
	mock.lockGetCerticateRefs.Lock()
	mock.calls.GetCerticateRefs = append(mock.calls.GetCerticateRefs, callInfo)
	mock.lockGetCerticateRefs.Unlock()
	return mock.GetCerticateRefsFunc(domain)
}

// GetCerticateRefsCalls gets all the calls that were made to GetCerticateRefs.
// Check the length with:
//
//	len(mockedcertMagicClientWrapper.GetCerticateRefsCalls())
func (mock *certMagicClientWrapperMock) GetCerticateRefsCalls() []struct {
	Domain string
} {
	var calls []struct {
		Domain string
	}
	mock.lockGetCerticateRefs.RLock()
	calls = mock.calls.GetCerticateRefs
	mock.lockGetCerticateRefs.RUnlock()
	return calls
}

// ManageCertificate calls ManageCertificateFunc.
func (mock *certMagicClientWrapperMock) ManageCertificate(ctx context.Context, domainNames []string) error {
	if mock.ManageCertificateFunc == nil {
		panic("certMagicClientWrapperMock.ManageCertificateFunc: method is nil but certMagicClientWrapper.ManageCertificate was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		DomainNames []string
	}{
		Ctx:         ctx,
		DomainNames: domainNames,
	}
	mock.lockManageCertificate.Lock()
	mock.calls.ManageCertificate = append(mock.calls.ManageCertificate, callInfo)
	mock.lockManageCertificate.Unlock()
	return mock.ManageCertificateFunc(ctx, domainNames)
}

// ManageCertificateCalls gets all the calls that were made to ManageCertificate.
// Check the length with:
//
//	len(mockedcertMagicClientWrapper.ManageCertificateCalls())
func (mock *certMagicClientWrapperMock) ManageCertificateCalls() []struct {
	Ctx         context.Context
	DomainNames []string
} {
	var calls []struct {
		Ctx         context.Context
		DomainNames []string
	}
	mock.lockManageCertificate.RLock()
	calls = mock.calls.ManageCertificate
	mock.lockManageCertificate.RUnlock()
	return calls
}

// RevokeCertificate calls RevokeCertificateFunc.
func (mock *certMagicClientWrapperMock) RevokeCertificate(ctx context.Context, domain string, reason int) error {
	if mock.RevokeCertificateFunc == nil {
		panic("certMagicClientWrapperMock.RevokeCertificateFunc: method is nil but certMagicClientWrapper.RevokeCertificate was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Domain string
		Reason int
	}{
		Ctx:    ctx,
		Domain: domain,
		Reason: reason,
	}
	mock.lockRevokeCertificate.Lock()
	mock.calls.RevokeCertificate = append(mock.calls.RevokeCertificate, callInfo)
	mock.lockRevokeCertificate.Unlock()
	return mock.RevokeCertificateFunc(ctx, domain, reason)
}

// RevokeCertificateCalls gets all the calls that were made to RevokeCertificate.
// Check the length with:
//
//	len(mockedcertMagicClientWrapper.RevokeCertificateCalls())
func (mock *certMagicClientWrapperMock) RevokeCertificateCalls() []struct {
	Ctx    context.Context
	Domain string
	Reason int
} {
	var calls []struct {
		Ctx    context.Context
		Domain string
		Reason int
	}
	mock.lockRevokeCertificate.RLock()
	calls = mock.calls.RevokeCertificate
	mock.lockRevokeCertificate.RUnlock()
	return calls
}
