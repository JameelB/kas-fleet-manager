// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package kafkatlscertmgmt

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/secretsmanager"
	"sync"
)

// Ensure, that SecretManagerClientMock does implement SecretManagerClient.
// If this is not the case, regenerate this file with moq.
var _ SecretManagerClient = &SecretManagerClientMock{}

// SecretManagerClientMock is a mock implementation of SecretManagerClient.
//
//	func TestSomethingThatUsesSecretManagerClient(t *testing.T) {
//
//		// make and configure a mocked SecretManagerClient
//		mockedSecretManagerClient := &SecretManagerClientMock{
//			CancelRotateSecretFunc: func(cancelRotateSecretInput *secretsmanager.CancelRotateSecretInput) (*secretsmanager.CancelRotateSecretOutput, error) {
//				panic("mock out the CancelRotateSecret method")
//			},
//			CancelRotateSecretRequestFunc: func(cancelRotateSecretInput *secretsmanager.CancelRotateSecretInput) (*request.Request, *secretsmanager.CancelRotateSecretOutput) {
//				panic("mock out the CancelRotateSecretRequest method")
//			},
//			CancelRotateSecretWithContextFunc: func(contextMoqParam context.Context, cancelRotateSecretInput *secretsmanager.CancelRotateSecretInput, options ...request.Option) (*secretsmanager.CancelRotateSecretOutput, error) {
//				panic("mock out the CancelRotateSecretWithContext method")
//			},
//			CreateSecretFunc: func(createSecretInput *secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error) {
//				panic("mock out the CreateSecret method")
//			},
//			CreateSecretRequestFunc: func(createSecretInput *secretsmanager.CreateSecretInput) (*request.Request, *secretsmanager.CreateSecretOutput) {
//				panic("mock out the CreateSecretRequest method")
//			},
//			CreateSecretWithContextFunc: func(contextMoqParam context.Context, createSecretInput *secretsmanager.CreateSecretInput, options ...request.Option) (*secretsmanager.CreateSecretOutput, error) {
//				panic("mock out the CreateSecretWithContext method")
//			},
//			DeleteResourcePolicyFunc: func(deleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput) (*secretsmanager.DeleteResourcePolicyOutput, error) {
//				panic("mock out the DeleteResourcePolicy method")
//			},
//			DeleteResourcePolicyRequestFunc: func(deleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput) (*request.Request, *secretsmanager.DeleteResourcePolicyOutput) {
//				panic("mock out the DeleteResourcePolicyRequest method")
//			},
//			DeleteResourcePolicyWithContextFunc: func(contextMoqParam context.Context, deleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput, options ...request.Option) (*secretsmanager.DeleteResourcePolicyOutput, error) {
//				panic("mock out the DeleteResourcePolicyWithContext method")
//			},
//			DeleteSecretFunc: func(deleteSecretInput *secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error) {
//				panic("mock out the DeleteSecret method")
//			},
//			DeleteSecretRequestFunc: func(deleteSecretInput *secretsmanager.DeleteSecretInput) (*request.Request, *secretsmanager.DeleteSecretOutput) {
//				panic("mock out the DeleteSecretRequest method")
//			},
//			DeleteSecretWithContextFunc: func(contextMoqParam context.Context, deleteSecretInput *secretsmanager.DeleteSecretInput, options ...request.Option) (*secretsmanager.DeleteSecretOutput, error) {
//				panic("mock out the DeleteSecretWithContext method")
//			},
//			DescribeSecretFunc: func(describeSecretInput *secretsmanager.DescribeSecretInput) (*secretsmanager.DescribeSecretOutput, error) {
//				panic("mock out the DescribeSecret method")
//			},
//			DescribeSecretRequestFunc: func(describeSecretInput *secretsmanager.DescribeSecretInput) (*request.Request, *secretsmanager.DescribeSecretOutput) {
//				panic("mock out the DescribeSecretRequest method")
//			},
//			DescribeSecretWithContextFunc: func(contextMoqParam context.Context, describeSecretInput *secretsmanager.DescribeSecretInput, options ...request.Option) (*secretsmanager.DescribeSecretOutput, error) {
//				panic("mock out the DescribeSecretWithContext method")
//			},
//			GetRandomPasswordFunc: func(getRandomPasswordInput *secretsmanager.GetRandomPasswordInput) (*secretsmanager.GetRandomPasswordOutput, error) {
//				panic("mock out the GetRandomPassword method")
//			},
//			GetRandomPasswordRequestFunc: func(getRandomPasswordInput *secretsmanager.GetRandomPasswordInput) (*request.Request, *secretsmanager.GetRandomPasswordOutput) {
//				panic("mock out the GetRandomPasswordRequest method")
//			},
//			GetRandomPasswordWithContextFunc: func(contextMoqParam context.Context, getRandomPasswordInput *secretsmanager.GetRandomPasswordInput, options ...request.Option) (*secretsmanager.GetRandomPasswordOutput, error) {
//				panic("mock out the GetRandomPasswordWithContext method")
//			},
//			GetResourcePolicyFunc: func(getResourcePolicyInput *secretsmanager.GetResourcePolicyInput) (*secretsmanager.GetResourcePolicyOutput, error) {
//				panic("mock out the GetResourcePolicy method")
//			},
//			GetResourcePolicyRequestFunc: func(getResourcePolicyInput *secretsmanager.GetResourcePolicyInput) (*request.Request, *secretsmanager.GetResourcePolicyOutput) {
//				panic("mock out the GetResourcePolicyRequest method")
//			},
//			GetResourcePolicyWithContextFunc: func(contextMoqParam context.Context, getResourcePolicyInput *secretsmanager.GetResourcePolicyInput, options ...request.Option) (*secretsmanager.GetResourcePolicyOutput, error) {
//				panic("mock out the GetResourcePolicyWithContext method")
//			},
//			GetSecretValueFunc: func(getSecretValueInput *secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error) {
//				panic("mock out the GetSecretValue method")
//			},
//			GetSecretValueRequestFunc: func(getSecretValueInput *secretsmanager.GetSecretValueInput) (*request.Request, *secretsmanager.GetSecretValueOutput) {
//				panic("mock out the GetSecretValueRequest method")
//			},
//			GetSecretValueWithContextFunc: func(contextMoqParam context.Context, getSecretValueInput *secretsmanager.GetSecretValueInput, options ...request.Option) (*secretsmanager.GetSecretValueOutput, error) {
//				panic("mock out the GetSecretValueWithContext method")
//			},
//			ListSecretVersionIdsFunc: func(listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput) (*secretsmanager.ListSecretVersionIdsOutput, error) {
//				panic("mock out the ListSecretVersionIds method")
//			},
//			ListSecretVersionIdsPagesFunc: func(listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput, fn func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool) error {
//				panic("mock out the ListSecretVersionIdsPages method")
//			},
//			ListSecretVersionIdsPagesWithContextFunc: func(contextMoqParam context.Context, listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput, fn func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListSecretVersionIdsPagesWithContext method")
//			},
//			ListSecretVersionIdsRequestFunc: func(listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput) (*request.Request, *secretsmanager.ListSecretVersionIdsOutput) {
//				panic("mock out the ListSecretVersionIdsRequest method")
//			},
//			ListSecretVersionIdsWithContextFunc: func(contextMoqParam context.Context, listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput, options ...request.Option) (*secretsmanager.ListSecretVersionIdsOutput, error) {
//				panic("mock out the ListSecretVersionIdsWithContext method")
//			},
//			ListSecretsFunc: func(listSecretsInput *secretsmanager.ListSecretsInput) (*secretsmanager.ListSecretsOutput, error) {
//				panic("mock out the ListSecrets method")
//			},
//			ListSecretsPagesFunc: func(listSecretsInput *secretsmanager.ListSecretsInput, fn func(*secretsmanager.ListSecretsOutput, bool) bool) error {
//				panic("mock out the ListSecretsPages method")
//			},
//			ListSecretsPagesWithContextFunc: func(contextMoqParam context.Context, listSecretsInput *secretsmanager.ListSecretsInput, fn func(*secretsmanager.ListSecretsOutput, bool) bool, options ...request.Option) error {
//				panic("mock out the ListSecretsPagesWithContext method")
//			},
//			ListSecretsRequestFunc: func(listSecretsInput *secretsmanager.ListSecretsInput) (*request.Request, *secretsmanager.ListSecretsOutput) {
//				panic("mock out the ListSecretsRequest method")
//			},
//			ListSecretsWithContextFunc: func(contextMoqParam context.Context, listSecretsInput *secretsmanager.ListSecretsInput, options ...request.Option) (*secretsmanager.ListSecretsOutput, error) {
//				panic("mock out the ListSecretsWithContext method")
//			},
//			PutResourcePolicyFunc: func(putResourcePolicyInput *secretsmanager.PutResourcePolicyInput) (*secretsmanager.PutResourcePolicyOutput, error) {
//				panic("mock out the PutResourcePolicy method")
//			},
//			PutResourcePolicyRequestFunc: func(putResourcePolicyInput *secretsmanager.PutResourcePolicyInput) (*request.Request, *secretsmanager.PutResourcePolicyOutput) {
//				panic("mock out the PutResourcePolicyRequest method")
//			},
//			PutResourcePolicyWithContextFunc: func(contextMoqParam context.Context, putResourcePolicyInput *secretsmanager.PutResourcePolicyInput, options ...request.Option) (*secretsmanager.PutResourcePolicyOutput, error) {
//				panic("mock out the PutResourcePolicyWithContext method")
//			},
//			PutSecretValueFunc: func(putSecretValueInput *secretsmanager.PutSecretValueInput) (*secretsmanager.PutSecretValueOutput, error) {
//				panic("mock out the PutSecretValue method")
//			},
//			PutSecretValueRequestFunc: func(putSecretValueInput *secretsmanager.PutSecretValueInput) (*request.Request, *secretsmanager.PutSecretValueOutput) {
//				panic("mock out the PutSecretValueRequest method")
//			},
//			PutSecretValueWithContextFunc: func(contextMoqParam context.Context, putSecretValueInput *secretsmanager.PutSecretValueInput, options ...request.Option) (*secretsmanager.PutSecretValueOutput, error) {
//				panic("mock out the PutSecretValueWithContext method")
//			},
//			RemoveRegionsFromReplicationFunc: func(removeRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput) (*secretsmanager.RemoveRegionsFromReplicationOutput, error) {
//				panic("mock out the RemoveRegionsFromReplication method")
//			},
//			RemoveRegionsFromReplicationRequestFunc: func(removeRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput) (*request.Request, *secretsmanager.RemoveRegionsFromReplicationOutput) {
//				panic("mock out the RemoveRegionsFromReplicationRequest method")
//			},
//			RemoveRegionsFromReplicationWithContextFunc: func(contextMoqParam context.Context, removeRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput, options ...request.Option) (*secretsmanager.RemoveRegionsFromReplicationOutput, error) {
//				panic("mock out the RemoveRegionsFromReplicationWithContext method")
//			},
//			ReplicateSecretToRegionsFunc: func(replicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput) (*secretsmanager.ReplicateSecretToRegionsOutput, error) {
//				panic("mock out the ReplicateSecretToRegions method")
//			},
//			ReplicateSecretToRegionsRequestFunc: func(replicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput) (*request.Request, *secretsmanager.ReplicateSecretToRegionsOutput) {
//				panic("mock out the ReplicateSecretToRegionsRequest method")
//			},
//			ReplicateSecretToRegionsWithContextFunc: func(contextMoqParam context.Context, replicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput, options ...request.Option) (*secretsmanager.ReplicateSecretToRegionsOutput, error) {
//				panic("mock out the ReplicateSecretToRegionsWithContext method")
//			},
//			RestoreSecretFunc: func(restoreSecretInput *secretsmanager.RestoreSecretInput) (*secretsmanager.RestoreSecretOutput, error) {
//				panic("mock out the RestoreSecret method")
//			},
//			RestoreSecretRequestFunc: func(restoreSecretInput *secretsmanager.RestoreSecretInput) (*request.Request, *secretsmanager.RestoreSecretOutput) {
//				panic("mock out the RestoreSecretRequest method")
//			},
//			RestoreSecretWithContextFunc: func(contextMoqParam context.Context, restoreSecretInput *secretsmanager.RestoreSecretInput, options ...request.Option) (*secretsmanager.RestoreSecretOutput, error) {
//				panic("mock out the RestoreSecretWithContext method")
//			},
//			RotateSecretFunc: func(rotateSecretInput *secretsmanager.RotateSecretInput) (*secretsmanager.RotateSecretOutput, error) {
//				panic("mock out the RotateSecret method")
//			},
//			RotateSecretRequestFunc: func(rotateSecretInput *secretsmanager.RotateSecretInput) (*request.Request, *secretsmanager.RotateSecretOutput) {
//				panic("mock out the RotateSecretRequest method")
//			},
//			RotateSecretWithContextFunc: func(contextMoqParam context.Context, rotateSecretInput *secretsmanager.RotateSecretInput, options ...request.Option) (*secretsmanager.RotateSecretOutput, error) {
//				panic("mock out the RotateSecretWithContext method")
//			},
//			StopReplicationToReplicaFunc: func(stopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput) (*secretsmanager.StopReplicationToReplicaOutput, error) {
//				panic("mock out the StopReplicationToReplica method")
//			},
//			StopReplicationToReplicaRequestFunc: func(stopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput) (*request.Request, *secretsmanager.StopReplicationToReplicaOutput) {
//				panic("mock out the StopReplicationToReplicaRequest method")
//			},
//			StopReplicationToReplicaWithContextFunc: func(contextMoqParam context.Context, stopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput, options ...request.Option) (*secretsmanager.StopReplicationToReplicaOutput, error) {
//				panic("mock out the StopReplicationToReplicaWithContext method")
//			},
//			TagResourceFunc: func(tagResourceInput *secretsmanager.TagResourceInput) (*secretsmanager.TagResourceOutput, error) {
//				panic("mock out the TagResource method")
//			},
//			TagResourceRequestFunc: func(tagResourceInput *secretsmanager.TagResourceInput) (*request.Request, *secretsmanager.TagResourceOutput) {
//				panic("mock out the TagResourceRequest method")
//			},
//			TagResourceWithContextFunc: func(contextMoqParam context.Context, tagResourceInput *secretsmanager.TagResourceInput, options ...request.Option) (*secretsmanager.TagResourceOutput, error) {
//				panic("mock out the TagResourceWithContext method")
//			},
//			UntagResourceFunc: func(untagResourceInput *secretsmanager.UntagResourceInput) (*secretsmanager.UntagResourceOutput, error) {
//				panic("mock out the UntagResource method")
//			},
//			UntagResourceRequestFunc: func(untagResourceInput *secretsmanager.UntagResourceInput) (*request.Request, *secretsmanager.UntagResourceOutput) {
//				panic("mock out the UntagResourceRequest method")
//			},
//			UntagResourceWithContextFunc: func(contextMoqParam context.Context, untagResourceInput *secretsmanager.UntagResourceInput, options ...request.Option) (*secretsmanager.UntagResourceOutput, error) {
//				panic("mock out the UntagResourceWithContext method")
//			},
//			UpdateSecretFunc: func(updateSecretInput *secretsmanager.UpdateSecretInput) (*secretsmanager.UpdateSecretOutput, error) {
//				panic("mock out the UpdateSecret method")
//			},
//			UpdateSecretRequestFunc: func(updateSecretInput *secretsmanager.UpdateSecretInput) (*request.Request, *secretsmanager.UpdateSecretOutput) {
//				panic("mock out the UpdateSecretRequest method")
//			},
//			UpdateSecretVersionStageFunc: func(updateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
//				panic("mock out the UpdateSecretVersionStage method")
//			},
//			UpdateSecretVersionStageRequestFunc: func(updateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput) (*request.Request, *secretsmanager.UpdateSecretVersionStageOutput) {
//				panic("mock out the UpdateSecretVersionStageRequest method")
//			},
//			UpdateSecretVersionStageWithContextFunc: func(contextMoqParam context.Context, updateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput, options ...request.Option) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
//				panic("mock out the UpdateSecretVersionStageWithContext method")
//			},
//			UpdateSecretWithContextFunc: func(contextMoqParam context.Context, updateSecretInput *secretsmanager.UpdateSecretInput, options ...request.Option) (*secretsmanager.UpdateSecretOutput, error) {
//				panic("mock out the UpdateSecretWithContext method")
//			},
//			ValidateResourcePolicyFunc: func(validateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput) (*secretsmanager.ValidateResourcePolicyOutput, error) {
//				panic("mock out the ValidateResourcePolicy method")
//			},
//			ValidateResourcePolicyRequestFunc: func(validateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput) (*request.Request, *secretsmanager.ValidateResourcePolicyOutput) {
//				panic("mock out the ValidateResourcePolicyRequest method")
//			},
//			ValidateResourcePolicyWithContextFunc: func(contextMoqParam context.Context, validateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput, options ...request.Option) (*secretsmanager.ValidateResourcePolicyOutput, error) {
//				panic("mock out the ValidateResourcePolicyWithContext method")
//			},
//		}
//
//		// use mockedSecretManagerClient in code that requires SecretManagerClient
//		// and then make assertions.
//
//	}
type SecretManagerClientMock struct {
	// CancelRotateSecretFunc mocks the CancelRotateSecret method.
	CancelRotateSecretFunc func(cancelRotateSecretInput *secretsmanager.CancelRotateSecretInput) (*secretsmanager.CancelRotateSecretOutput, error)

	// CancelRotateSecretRequestFunc mocks the CancelRotateSecretRequest method.
	CancelRotateSecretRequestFunc func(cancelRotateSecretInput *secretsmanager.CancelRotateSecretInput) (*request.Request, *secretsmanager.CancelRotateSecretOutput)

	// CancelRotateSecretWithContextFunc mocks the CancelRotateSecretWithContext method.
	CancelRotateSecretWithContextFunc func(contextMoqParam context.Context, cancelRotateSecretInput *secretsmanager.CancelRotateSecretInput, options ...request.Option) (*secretsmanager.CancelRotateSecretOutput, error)

	// CreateSecretFunc mocks the CreateSecret method.
	CreateSecretFunc func(createSecretInput *secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error)

	// CreateSecretRequestFunc mocks the CreateSecretRequest method.
	CreateSecretRequestFunc func(createSecretInput *secretsmanager.CreateSecretInput) (*request.Request, *secretsmanager.CreateSecretOutput)

	// CreateSecretWithContextFunc mocks the CreateSecretWithContext method.
	CreateSecretWithContextFunc func(contextMoqParam context.Context, createSecretInput *secretsmanager.CreateSecretInput, options ...request.Option) (*secretsmanager.CreateSecretOutput, error)

	// DeleteResourcePolicyFunc mocks the DeleteResourcePolicy method.
	DeleteResourcePolicyFunc func(deleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput) (*secretsmanager.DeleteResourcePolicyOutput, error)

	// DeleteResourcePolicyRequestFunc mocks the DeleteResourcePolicyRequest method.
	DeleteResourcePolicyRequestFunc func(deleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput) (*request.Request, *secretsmanager.DeleteResourcePolicyOutput)

	// DeleteResourcePolicyWithContextFunc mocks the DeleteResourcePolicyWithContext method.
	DeleteResourcePolicyWithContextFunc func(contextMoqParam context.Context, deleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput, options ...request.Option) (*secretsmanager.DeleteResourcePolicyOutput, error)

	// DeleteSecretFunc mocks the DeleteSecret method.
	DeleteSecretFunc func(deleteSecretInput *secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error)

	// DeleteSecretRequestFunc mocks the DeleteSecretRequest method.
	DeleteSecretRequestFunc func(deleteSecretInput *secretsmanager.DeleteSecretInput) (*request.Request, *secretsmanager.DeleteSecretOutput)

	// DeleteSecretWithContextFunc mocks the DeleteSecretWithContext method.
	DeleteSecretWithContextFunc func(contextMoqParam context.Context, deleteSecretInput *secretsmanager.DeleteSecretInput, options ...request.Option) (*secretsmanager.DeleteSecretOutput, error)

	// DescribeSecretFunc mocks the DescribeSecret method.
	DescribeSecretFunc func(describeSecretInput *secretsmanager.DescribeSecretInput) (*secretsmanager.DescribeSecretOutput, error)

	// DescribeSecretRequestFunc mocks the DescribeSecretRequest method.
	DescribeSecretRequestFunc func(describeSecretInput *secretsmanager.DescribeSecretInput) (*request.Request, *secretsmanager.DescribeSecretOutput)

	// DescribeSecretWithContextFunc mocks the DescribeSecretWithContext method.
	DescribeSecretWithContextFunc func(contextMoqParam context.Context, describeSecretInput *secretsmanager.DescribeSecretInput, options ...request.Option) (*secretsmanager.DescribeSecretOutput, error)

	// GetRandomPasswordFunc mocks the GetRandomPassword method.
	GetRandomPasswordFunc func(getRandomPasswordInput *secretsmanager.GetRandomPasswordInput) (*secretsmanager.GetRandomPasswordOutput, error)

	// GetRandomPasswordRequestFunc mocks the GetRandomPasswordRequest method.
	GetRandomPasswordRequestFunc func(getRandomPasswordInput *secretsmanager.GetRandomPasswordInput) (*request.Request, *secretsmanager.GetRandomPasswordOutput)

	// GetRandomPasswordWithContextFunc mocks the GetRandomPasswordWithContext method.
	GetRandomPasswordWithContextFunc func(contextMoqParam context.Context, getRandomPasswordInput *secretsmanager.GetRandomPasswordInput, options ...request.Option) (*secretsmanager.GetRandomPasswordOutput, error)

	// GetResourcePolicyFunc mocks the GetResourcePolicy method.
	GetResourcePolicyFunc func(getResourcePolicyInput *secretsmanager.GetResourcePolicyInput) (*secretsmanager.GetResourcePolicyOutput, error)

	// GetResourcePolicyRequestFunc mocks the GetResourcePolicyRequest method.
	GetResourcePolicyRequestFunc func(getResourcePolicyInput *secretsmanager.GetResourcePolicyInput) (*request.Request, *secretsmanager.GetResourcePolicyOutput)

	// GetResourcePolicyWithContextFunc mocks the GetResourcePolicyWithContext method.
	GetResourcePolicyWithContextFunc func(contextMoqParam context.Context, getResourcePolicyInput *secretsmanager.GetResourcePolicyInput, options ...request.Option) (*secretsmanager.GetResourcePolicyOutput, error)

	// GetSecretValueFunc mocks the GetSecretValue method.
	GetSecretValueFunc func(getSecretValueInput *secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error)

	// GetSecretValueRequestFunc mocks the GetSecretValueRequest method.
	GetSecretValueRequestFunc func(getSecretValueInput *secretsmanager.GetSecretValueInput) (*request.Request, *secretsmanager.GetSecretValueOutput)

	// GetSecretValueWithContextFunc mocks the GetSecretValueWithContext method.
	GetSecretValueWithContextFunc func(contextMoqParam context.Context, getSecretValueInput *secretsmanager.GetSecretValueInput, options ...request.Option) (*secretsmanager.GetSecretValueOutput, error)

	// ListSecretVersionIdsFunc mocks the ListSecretVersionIds method.
	ListSecretVersionIdsFunc func(listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput) (*secretsmanager.ListSecretVersionIdsOutput, error)

	// ListSecretVersionIdsPagesFunc mocks the ListSecretVersionIdsPages method.
	ListSecretVersionIdsPagesFunc func(listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput, fn func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool) error

	// ListSecretVersionIdsPagesWithContextFunc mocks the ListSecretVersionIdsPagesWithContext method.
	ListSecretVersionIdsPagesWithContextFunc func(contextMoqParam context.Context, listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput, fn func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool, options ...request.Option) error

	// ListSecretVersionIdsRequestFunc mocks the ListSecretVersionIdsRequest method.
	ListSecretVersionIdsRequestFunc func(listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput) (*request.Request, *secretsmanager.ListSecretVersionIdsOutput)

	// ListSecretVersionIdsWithContextFunc mocks the ListSecretVersionIdsWithContext method.
	ListSecretVersionIdsWithContextFunc func(contextMoqParam context.Context, listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput, options ...request.Option) (*secretsmanager.ListSecretVersionIdsOutput, error)

	// ListSecretsFunc mocks the ListSecrets method.
	ListSecretsFunc func(listSecretsInput *secretsmanager.ListSecretsInput) (*secretsmanager.ListSecretsOutput, error)

	// ListSecretsPagesFunc mocks the ListSecretsPages method.
	ListSecretsPagesFunc func(listSecretsInput *secretsmanager.ListSecretsInput, fn func(*secretsmanager.ListSecretsOutput, bool) bool) error

	// ListSecretsPagesWithContextFunc mocks the ListSecretsPagesWithContext method.
	ListSecretsPagesWithContextFunc func(contextMoqParam context.Context, listSecretsInput *secretsmanager.ListSecretsInput, fn func(*secretsmanager.ListSecretsOutput, bool) bool, options ...request.Option) error

	// ListSecretsRequestFunc mocks the ListSecretsRequest method.
	ListSecretsRequestFunc func(listSecretsInput *secretsmanager.ListSecretsInput) (*request.Request, *secretsmanager.ListSecretsOutput)

	// ListSecretsWithContextFunc mocks the ListSecretsWithContext method.
	ListSecretsWithContextFunc func(contextMoqParam context.Context, listSecretsInput *secretsmanager.ListSecretsInput, options ...request.Option) (*secretsmanager.ListSecretsOutput, error)

	// PutResourcePolicyFunc mocks the PutResourcePolicy method.
	PutResourcePolicyFunc func(putResourcePolicyInput *secretsmanager.PutResourcePolicyInput) (*secretsmanager.PutResourcePolicyOutput, error)

	// PutResourcePolicyRequestFunc mocks the PutResourcePolicyRequest method.
	PutResourcePolicyRequestFunc func(putResourcePolicyInput *secretsmanager.PutResourcePolicyInput) (*request.Request, *secretsmanager.PutResourcePolicyOutput)

	// PutResourcePolicyWithContextFunc mocks the PutResourcePolicyWithContext method.
	PutResourcePolicyWithContextFunc func(contextMoqParam context.Context, putResourcePolicyInput *secretsmanager.PutResourcePolicyInput, options ...request.Option) (*secretsmanager.PutResourcePolicyOutput, error)

	// PutSecretValueFunc mocks the PutSecretValue method.
	PutSecretValueFunc func(putSecretValueInput *secretsmanager.PutSecretValueInput) (*secretsmanager.PutSecretValueOutput, error)

	// PutSecretValueRequestFunc mocks the PutSecretValueRequest method.
	PutSecretValueRequestFunc func(putSecretValueInput *secretsmanager.PutSecretValueInput) (*request.Request, *secretsmanager.PutSecretValueOutput)

	// PutSecretValueWithContextFunc mocks the PutSecretValueWithContext method.
	PutSecretValueWithContextFunc func(contextMoqParam context.Context, putSecretValueInput *secretsmanager.PutSecretValueInput, options ...request.Option) (*secretsmanager.PutSecretValueOutput, error)

	// RemoveRegionsFromReplicationFunc mocks the RemoveRegionsFromReplication method.
	RemoveRegionsFromReplicationFunc func(removeRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput) (*secretsmanager.RemoveRegionsFromReplicationOutput, error)

	// RemoveRegionsFromReplicationRequestFunc mocks the RemoveRegionsFromReplicationRequest method.
	RemoveRegionsFromReplicationRequestFunc func(removeRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput) (*request.Request, *secretsmanager.RemoveRegionsFromReplicationOutput)

	// RemoveRegionsFromReplicationWithContextFunc mocks the RemoveRegionsFromReplicationWithContext method.
	RemoveRegionsFromReplicationWithContextFunc func(contextMoqParam context.Context, removeRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput, options ...request.Option) (*secretsmanager.RemoveRegionsFromReplicationOutput, error)

	// ReplicateSecretToRegionsFunc mocks the ReplicateSecretToRegions method.
	ReplicateSecretToRegionsFunc func(replicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput) (*secretsmanager.ReplicateSecretToRegionsOutput, error)

	// ReplicateSecretToRegionsRequestFunc mocks the ReplicateSecretToRegionsRequest method.
	ReplicateSecretToRegionsRequestFunc func(replicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput) (*request.Request, *secretsmanager.ReplicateSecretToRegionsOutput)

	// ReplicateSecretToRegionsWithContextFunc mocks the ReplicateSecretToRegionsWithContext method.
	ReplicateSecretToRegionsWithContextFunc func(contextMoqParam context.Context, replicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput, options ...request.Option) (*secretsmanager.ReplicateSecretToRegionsOutput, error)

	// RestoreSecretFunc mocks the RestoreSecret method.
	RestoreSecretFunc func(restoreSecretInput *secretsmanager.RestoreSecretInput) (*secretsmanager.RestoreSecretOutput, error)

	// RestoreSecretRequestFunc mocks the RestoreSecretRequest method.
	RestoreSecretRequestFunc func(restoreSecretInput *secretsmanager.RestoreSecretInput) (*request.Request, *secretsmanager.RestoreSecretOutput)

	// RestoreSecretWithContextFunc mocks the RestoreSecretWithContext method.
	RestoreSecretWithContextFunc func(contextMoqParam context.Context, restoreSecretInput *secretsmanager.RestoreSecretInput, options ...request.Option) (*secretsmanager.RestoreSecretOutput, error)

	// RotateSecretFunc mocks the RotateSecret method.
	RotateSecretFunc func(rotateSecretInput *secretsmanager.RotateSecretInput) (*secretsmanager.RotateSecretOutput, error)

	// RotateSecretRequestFunc mocks the RotateSecretRequest method.
	RotateSecretRequestFunc func(rotateSecretInput *secretsmanager.RotateSecretInput) (*request.Request, *secretsmanager.RotateSecretOutput)

	// RotateSecretWithContextFunc mocks the RotateSecretWithContext method.
	RotateSecretWithContextFunc func(contextMoqParam context.Context, rotateSecretInput *secretsmanager.RotateSecretInput, options ...request.Option) (*secretsmanager.RotateSecretOutput, error)

	// StopReplicationToReplicaFunc mocks the StopReplicationToReplica method.
	StopReplicationToReplicaFunc func(stopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput) (*secretsmanager.StopReplicationToReplicaOutput, error)

	// StopReplicationToReplicaRequestFunc mocks the StopReplicationToReplicaRequest method.
	StopReplicationToReplicaRequestFunc func(stopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput) (*request.Request, *secretsmanager.StopReplicationToReplicaOutput)

	// StopReplicationToReplicaWithContextFunc mocks the StopReplicationToReplicaWithContext method.
	StopReplicationToReplicaWithContextFunc func(contextMoqParam context.Context, stopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput, options ...request.Option) (*secretsmanager.StopReplicationToReplicaOutput, error)

	// TagResourceFunc mocks the TagResource method.
	TagResourceFunc func(tagResourceInput *secretsmanager.TagResourceInput) (*secretsmanager.TagResourceOutput, error)

	// TagResourceRequestFunc mocks the TagResourceRequest method.
	TagResourceRequestFunc func(tagResourceInput *secretsmanager.TagResourceInput) (*request.Request, *secretsmanager.TagResourceOutput)

	// TagResourceWithContextFunc mocks the TagResourceWithContext method.
	TagResourceWithContextFunc func(contextMoqParam context.Context, tagResourceInput *secretsmanager.TagResourceInput, options ...request.Option) (*secretsmanager.TagResourceOutput, error)

	// UntagResourceFunc mocks the UntagResource method.
	UntagResourceFunc func(untagResourceInput *secretsmanager.UntagResourceInput) (*secretsmanager.UntagResourceOutput, error)

	// UntagResourceRequestFunc mocks the UntagResourceRequest method.
	UntagResourceRequestFunc func(untagResourceInput *secretsmanager.UntagResourceInput) (*request.Request, *secretsmanager.UntagResourceOutput)

	// UntagResourceWithContextFunc mocks the UntagResourceWithContext method.
	UntagResourceWithContextFunc func(contextMoqParam context.Context, untagResourceInput *secretsmanager.UntagResourceInput, options ...request.Option) (*secretsmanager.UntagResourceOutput, error)

	// UpdateSecretFunc mocks the UpdateSecret method.
	UpdateSecretFunc func(updateSecretInput *secretsmanager.UpdateSecretInput) (*secretsmanager.UpdateSecretOutput, error)

	// UpdateSecretRequestFunc mocks the UpdateSecretRequest method.
	UpdateSecretRequestFunc func(updateSecretInput *secretsmanager.UpdateSecretInput) (*request.Request, *secretsmanager.UpdateSecretOutput)

	// UpdateSecretVersionStageFunc mocks the UpdateSecretVersionStage method.
	UpdateSecretVersionStageFunc func(updateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput) (*secretsmanager.UpdateSecretVersionStageOutput, error)

	// UpdateSecretVersionStageRequestFunc mocks the UpdateSecretVersionStageRequest method.
	UpdateSecretVersionStageRequestFunc func(updateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput) (*request.Request, *secretsmanager.UpdateSecretVersionStageOutput)

	// UpdateSecretVersionStageWithContextFunc mocks the UpdateSecretVersionStageWithContext method.
	UpdateSecretVersionStageWithContextFunc func(contextMoqParam context.Context, updateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput, options ...request.Option) (*secretsmanager.UpdateSecretVersionStageOutput, error)

	// UpdateSecretWithContextFunc mocks the UpdateSecretWithContext method.
	UpdateSecretWithContextFunc func(contextMoqParam context.Context, updateSecretInput *secretsmanager.UpdateSecretInput, options ...request.Option) (*secretsmanager.UpdateSecretOutput, error)

	// ValidateResourcePolicyFunc mocks the ValidateResourcePolicy method.
	ValidateResourcePolicyFunc func(validateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput) (*secretsmanager.ValidateResourcePolicyOutput, error)

	// ValidateResourcePolicyRequestFunc mocks the ValidateResourcePolicyRequest method.
	ValidateResourcePolicyRequestFunc func(validateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput) (*request.Request, *secretsmanager.ValidateResourcePolicyOutput)

	// ValidateResourcePolicyWithContextFunc mocks the ValidateResourcePolicyWithContext method.
	ValidateResourcePolicyWithContextFunc func(contextMoqParam context.Context, validateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput, options ...request.Option) (*secretsmanager.ValidateResourcePolicyOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// CancelRotateSecret holds details about calls to the CancelRotateSecret method.
		CancelRotateSecret []struct {
			// CancelRotateSecretInput is the cancelRotateSecretInput argument value.
			CancelRotateSecretInput *secretsmanager.CancelRotateSecretInput
		}
		// CancelRotateSecretRequest holds details about calls to the CancelRotateSecretRequest method.
		CancelRotateSecretRequest []struct {
			// CancelRotateSecretInput is the cancelRotateSecretInput argument value.
			CancelRotateSecretInput *secretsmanager.CancelRotateSecretInput
		}
		// CancelRotateSecretWithContext holds details about calls to the CancelRotateSecretWithContext method.
		CancelRotateSecretWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CancelRotateSecretInput is the cancelRotateSecretInput argument value.
			CancelRotateSecretInput *secretsmanager.CancelRotateSecretInput
			// Options is the options argument value.
			Options []request.Option
		}
		// CreateSecret holds details about calls to the CreateSecret method.
		CreateSecret []struct {
			// CreateSecretInput is the createSecretInput argument value.
			CreateSecretInput *secretsmanager.CreateSecretInput
		}
		// CreateSecretRequest holds details about calls to the CreateSecretRequest method.
		CreateSecretRequest []struct {
			// CreateSecretInput is the createSecretInput argument value.
			CreateSecretInput *secretsmanager.CreateSecretInput
		}
		// CreateSecretWithContext holds details about calls to the CreateSecretWithContext method.
		CreateSecretWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CreateSecretInput is the createSecretInput argument value.
			CreateSecretInput *secretsmanager.CreateSecretInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteResourcePolicy holds details about calls to the DeleteResourcePolicy method.
		DeleteResourcePolicy []struct {
			// DeleteResourcePolicyInput is the deleteResourcePolicyInput argument value.
			DeleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput
		}
		// DeleteResourcePolicyRequest holds details about calls to the DeleteResourcePolicyRequest method.
		DeleteResourcePolicyRequest []struct {
			// DeleteResourcePolicyInput is the deleteResourcePolicyInput argument value.
			DeleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput
		}
		// DeleteResourcePolicyWithContext holds details about calls to the DeleteResourcePolicyWithContext method.
		DeleteResourcePolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteResourcePolicyInput is the deleteResourcePolicyInput argument value.
			DeleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DeleteSecret holds details about calls to the DeleteSecret method.
		DeleteSecret []struct {
			// DeleteSecretInput is the deleteSecretInput argument value.
			DeleteSecretInput *secretsmanager.DeleteSecretInput
		}
		// DeleteSecretRequest holds details about calls to the DeleteSecretRequest method.
		DeleteSecretRequest []struct {
			// DeleteSecretInput is the deleteSecretInput argument value.
			DeleteSecretInput *secretsmanager.DeleteSecretInput
		}
		// DeleteSecretWithContext holds details about calls to the DeleteSecretWithContext method.
		DeleteSecretWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DeleteSecretInput is the deleteSecretInput argument value.
			DeleteSecretInput *secretsmanager.DeleteSecretInput
			// Options is the options argument value.
			Options []request.Option
		}
		// DescribeSecret holds details about calls to the DescribeSecret method.
		DescribeSecret []struct {
			// DescribeSecretInput is the describeSecretInput argument value.
			DescribeSecretInput *secretsmanager.DescribeSecretInput
		}
		// DescribeSecretRequest holds details about calls to the DescribeSecretRequest method.
		DescribeSecretRequest []struct {
			// DescribeSecretInput is the describeSecretInput argument value.
			DescribeSecretInput *secretsmanager.DescribeSecretInput
		}
		// DescribeSecretWithContext holds details about calls to the DescribeSecretWithContext method.
		DescribeSecretWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// DescribeSecretInput is the describeSecretInput argument value.
			DescribeSecretInput *secretsmanager.DescribeSecretInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetRandomPassword holds details about calls to the GetRandomPassword method.
		GetRandomPassword []struct {
			// GetRandomPasswordInput is the getRandomPasswordInput argument value.
			GetRandomPasswordInput *secretsmanager.GetRandomPasswordInput
		}
		// GetRandomPasswordRequest holds details about calls to the GetRandomPasswordRequest method.
		GetRandomPasswordRequest []struct {
			// GetRandomPasswordInput is the getRandomPasswordInput argument value.
			GetRandomPasswordInput *secretsmanager.GetRandomPasswordInput
		}
		// GetRandomPasswordWithContext holds details about calls to the GetRandomPasswordWithContext method.
		GetRandomPasswordWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetRandomPasswordInput is the getRandomPasswordInput argument value.
			GetRandomPasswordInput *secretsmanager.GetRandomPasswordInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetResourcePolicy holds details about calls to the GetResourcePolicy method.
		GetResourcePolicy []struct {
			// GetResourcePolicyInput is the getResourcePolicyInput argument value.
			GetResourcePolicyInput *secretsmanager.GetResourcePolicyInput
		}
		// GetResourcePolicyRequest holds details about calls to the GetResourcePolicyRequest method.
		GetResourcePolicyRequest []struct {
			// GetResourcePolicyInput is the getResourcePolicyInput argument value.
			GetResourcePolicyInput *secretsmanager.GetResourcePolicyInput
		}
		// GetResourcePolicyWithContext holds details about calls to the GetResourcePolicyWithContext method.
		GetResourcePolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetResourcePolicyInput is the getResourcePolicyInput argument value.
			GetResourcePolicyInput *secretsmanager.GetResourcePolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// GetSecretValue holds details about calls to the GetSecretValue method.
		GetSecretValue []struct {
			// GetSecretValueInput is the getSecretValueInput argument value.
			GetSecretValueInput *secretsmanager.GetSecretValueInput
		}
		// GetSecretValueRequest holds details about calls to the GetSecretValueRequest method.
		GetSecretValueRequest []struct {
			// GetSecretValueInput is the getSecretValueInput argument value.
			GetSecretValueInput *secretsmanager.GetSecretValueInput
		}
		// GetSecretValueWithContext holds details about calls to the GetSecretValueWithContext method.
		GetSecretValueWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// GetSecretValueInput is the getSecretValueInput argument value.
			GetSecretValueInput *secretsmanager.GetSecretValueInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListSecretVersionIds holds details about calls to the ListSecretVersionIds method.
		ListSecretVersionIds []struct {
			// ListSecretVersionIdsInput is the listSecretVersionIdsInput argument value.
			ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
		}
		// ListSecretVersionIdsPages holds details about calls to the ListSecretVersionIdsPages method.
		ListSecretVersionIdsPages []struct {
			// ListSecretVersionIdsInput is the listSecretVersionIdsInput argument value.
			ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
			// Fn is the fn argument value.
			Fn func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool
		}
		// ListSecretVersionIdsPagesWithContext holds details about calls to the ListSecretVersionIdsPagesWithContext method.
		ListSecretVersionIdsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListSecretVersionIdsInput is the listSecretVersionIdsInput argument value.
			ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
			// Fn is the fn argument value.
			Fn func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListSecretVersionIdsRequest holds details about calls to the ListSecretVersionIdsRequest method.
		ListSecretVersionIdsRequest []struct {
			// ListSecretVersionIdsInput is the listSecretVersionIdsInput argument value.
			ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
		}
		// ListSecretVersionIdsWithContext holds details about calls to the ListSecretVersionIdsWithContext method.
		ListSecretVersionIdsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListSecretVersionIdsInput is the listSecretVersionIdsInput argument value.
			ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ListSecrets holds details about calls to the ListSecrets method.
		ListSecrets []struct {
			// ListSecretsInput is the listSecretsInput argument value.
			ListSecretsInput *secretsmanager.ListSecretsInput
		}
		// ListSecretsPages holds details about calls to the ListSecretsPages method.
		ListSecretsPages []struct {
			// ListSecretsInput is the listSecretsInput argument value.
			ListSecretsInput *secretsmanager.ListSecretsInput
			// Fn is the fn argument value.
			Fn func(*secretsmanager.ListSecretsOutput, bool) bool
		}
		// ListSecretsPagesWithContext holds details about calls to the ListSecretsPagesWithContext method.
		ListSecretsPagesWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListSecretsInput is the listSecretsInput argument value.
			ListSecretsInput *secretsmanager.ListSecretsInput
			// Fn is the fn argument value.
			Fn func(*secretsmanager.ListSecretsOutput, bool) bool
			// Options is the options argument value.
			Options []request.Option
		}
		// ListSecretsRequest holds details about calls to the ListSecretsRequest method.
		ListSecretsRequest []struct {
			// ListSecretsInput is the listSecretsInput argument value.
			ListSecretsInput *secretsmanager.ListSecretsInput
		}
		// ListSecretsWithContext holds details about calls to the ListSecretsWithContext method.
		ListSecretsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ListSecretsInput is the listSecretsInput argument value.
			ListSecretsInput *secretsmanager.ListSecretsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutResourcePolicy holds details about calls to the PutResourcePolicy method.
		PutResourcePolicy []struct {
			// PutResourcePolicyInput is the putResourcePolicyInput argument value.
			PutResourcePolicyInput *secretsmanager.PutResourcePolicyInput
		}
		// PutResourcePolicyRequest holds details about calls to the PutResourcePolicyRequest method.
		PutResourcePolicyRequest []struct {
			// PutResourcePolicyInput is the putResourcePolicyInput argument value.
			PutResourcePolicyInput *secretsmanager.PutResourcePolicyInput
		}
		// PutResourcePolicyWithContext holds details about calls to the PutResourcePolicyWithContext method.
		PutResourcePolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutResourcePolicyInput is the putResourcePolicyInput argument value.
			PutResourcePolicyInput *secretsmanager.PutResourcePolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
		// PutSecretValue holds details about calls to the PutSecretValue method.
		PutSecretValue []struct {
			// PutSecretValueInput is the putSecretValueInput argument value.
			PutSecretValueInput *secretsmanager.PutSecretValueInput
		}
		// PutSecretValueRequest holds details about calls to the PutSecretValueRequest method.
		PutSecretValueRequest []struct {
			// PutSecretValueInput is the putSecretValueInput argument value.
			PutSecretValueInput *secretsmanager.PutSecretValueInput
		}
		// PutSecretValueWithContext holds details about calls to the PutSecretValueWithContext method.
		PutSecretValueWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PutSecretValueInput is the putSecretValueInput argument value.
			PutSecretValueInput *secretsmanager.PutSecretValueInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RemoveRegionsFromReplication holds details about calls to the RemoveRegionsFromReplication method.
		RemoveRegionsFromReplication []struct {
			// RemoveRegionsFromReplicationInput is the removeRegionsFromReplicationInput argument value.
			RemoveRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput
		}
		// RemoveRegionsFromReplicationRequest holds details about calls to the RemoveRegionsFromReplicationRequest method.
		RemoveRegionsFromReplicationRequest []struct {
			// RemoveRegionsFromReplicationInput is the removeRegionsFromReplicationInput argument value.
			RemoveRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput
		}
		// RemoveRegionsFromReplicationWithContext holds details about calls to the RemoveRegionsFromReplicationWithContext method.
		RemoveRegionsFromReplicationWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RemoveRegionsFromReplicationInput is the removeRegionsFromReplicationInput argument value.
			RemoveRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ReplicateSecretToRegions holds details about calls to the ReplicateSecretToRegions method.
		ReplicateSecretToRegions []struct {
			// ReplicateSecretToRegionsInput is the replicateSecretToRegionsInput argument value.
			ReplicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput
		}
		// ReplicateSecretToRegionsRequest holds details about calls to the ReplicateSecretToRegionsRequest method.
		ReplicateSecretToRegionsRequest []struct {
			// ReplicateSecretToRegionsInput is the replicateSecretToRegionsInput argument value.
			ReplicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput
		}
		// ReplicateSecretToRegionsWithContext holds details about calls to the ReplicateSecretToRegionsWithContext method.
		ReplicateSecretToRegionsWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ReplicateSecretToRegionsInput is the replicateSecretToRegionsInput argument value.
			ReplicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RestoreSecret holds details about calls to the RestoreSecret method.
		RestoreSecret []struct {
			// RestoreSecretInput is the restoreSecretInput argument value.
			RestoreSecretInput *secretsmanager.RestoreSecretInput
		}
		// RestoreSecretRequest holds details about calls to the RestoreSecretRequest method.
		RestoreSecretRequest []struct {
			// RestoreSecretInput is the restoreSecretInput argument value.
			RestoreSecretInput *secretsmanager.RestoreSecretInput
		}
		// RestoreSecretWithContext holds details about calls to the RestoreSecretWithContext method.
		RestoreSecretWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RestoreSecretInput is the restoreSecretInput argument value.
			RestoreSecretInput *secretsmanager.RestoreSecretInput
			// Options is the options argument value.
			Options []request.Option
		}
		// RotateSecret holds details about calls to the RotateSecret method.
		RotateSecret []struct {
			// RotateSecretInput is the rotateSecretInput argument value.
			RotateSecretInput *secretsmanager.RotateSecretInput
		}
		// RotateSecretRequest holds details about calls to the RotateSecretRequest method.
		RotateSecretRequest []struct {
			// RotateSecretInput is the rotateSecretInput argument value.
			RotateSecretInput *secretsmanager.RotateSecretInput
		}
		// RotateSecretWithContext holds details about calls to the RotateSecretWithContext method.
		RotateSecretWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RotateSecretInput is the rotateSecretInput argument value.
			RotateSecretInput *secretsmanager.RotateSecretInput
			// Options is the options argument value.
			Options []request.Option
		}
		// StopReplicationToReplica holds details about calls to the StopReplicationToReplica method.
		StopReplicationToReplica []struct {
			// StopReplicationToReplicaInput is the stopReplicationToReplicaInput argument value.
			StopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput
		}
		// StopReplicationToReplicaRequest holds details about calls to the StopReplicationToReplicaRequest method.
		StopReplicationToReplicaRequest []struct {
			// StopReplicationToReplicaInput is the stopReplicationToReplicaInput argument value.
			StopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput
		}
		// StopReplicationToReplicaWithContext holds details about calls to the StopReplicationToReplicaWithContext method.
		StopReplicationToReplicaWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// StopReplicationToReplicaInput is the stopReplicationToReplicaInput argument value.
			StopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput
			// Options is the options argument value.
			Options []request.Option
		}
		// TagResource holds details about calls to the TagResource method.
		TagResource []struct {
			// TagResourceInput is the tagResourceInput argument value.
			TagResourceInput *secretsmanager.TagResourceInput
		}
		// TagResourceRequest holds details about calls to the TagResourceRequest method.
		TagResourceRequest []struct {
			// TagResourceInput is the tagResourceInput argument value.
			TagResourceInput *secretsmanager.TagResourceInput
		}
		// TagResourceWithContext holds details about calls to the TagResourceWithContext method.
		TagResourceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// TagResourceInput is the tagResourceInput argument value.
			TagResourceInput *secretsmanager.TagResourceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UntagResource holds details about calls to the UntagResource method.
		UntagResource []struct {
			// UntagResourceInput is the untagResourceInput argument value.
			UntagResourceInput *secretsmanager.UntagResourceInput
		}
		// UntagResourceRequest holds details about calls to the UntagResourceRequest method.
		UntagResourceRequest []struct {
			// UntagResourceInput is the untagResourceInput argument value.
			UntagResourceInput *secretsmanager.UntagResourceInput
		}
		// UntagResourceWithContext holds details about calls to the UntagResourceWithContext method.
		UntagResourceWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UntagResourceInput is the untagResourceInput argument value.
			UntagResourceInput *secretsmanager.UntagResourceInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateSecret holds details about calls to the UpdateSecret method.
		UpdateSecret []struct {
			// UpdateSecretInput is the updateSecretInput argument value.
			UpdateSecretInput *secretsmanager.UpdateSecretInput
		}
		// UpdateSecretRequest holds details about calls to the UpdateSecretRequest method.
		UpdateSecretRequest []struct {
			// UpdateSecretInput is the updateSecretInput argument value.
			UpdateSecretInput *secretsmanager.UpdateSecretInput
		}
		// UpdateSecretVersionStage holds details about calls to the UpdateSecretVersionStage method.
		UpdateSecretVersionStage []struct {
			// UpdateSecretVersionStageInput is the updateSecretVersionStageInput argument value.
			UpdateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput
		}
		// UpdateSecretVersionStageRequest holds details about calls to the UpdateSecretVersionStageRequest method.
		UpdateSecretVersionStageRequest []struct {
			// UpdateSecretVersionStageInput is the updateSecretVersionStageInput argument value.
			UpdateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput
		}
		// UpdateSecretVersionStageWithContext holds details about calls to the UpdateSecretVersionStageWithContext method.
		UpdateSecretVersionStageWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateSecretVersionStageInput is the updateSecretVersionStageInput argument value.
			UpdateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput
			// Options is the options argument value.
			Options []request.Option
		}
		// UpdateSecretWithContext holds details about calls to the UpdateSecretWithContext method.
		UpdateSecretWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// UpdateSecretInput is the updateSecretInput argument value.
			UpdateSecretInput *secretsmanager.UpdateSecretInput
			// Options is the options argument value.
			Options []request.Option
		}
		// ValidateResourcePolicy holds details about calls to the ValidateResourcePolicy method.
		ValidateResourcePolicy []struct {
			// ValidateResourcePolicyInput is the validateResourcePolicyInput argument value.
			ValidateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput
		}
		// ValidateResourcePolicyRequest holds details about calls to the ValidateResourcePolicyRequest method.
		ValidateResourcePolicyRequest []struct {
			// ValidateResourcePolicyInput is the validateResourcePolicyInput argument value.
			ValidateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput
		}
		// ValidateResourcePolicyWithContext holds details about calls to the ValidateResourcePolicyWithContext method.
		ValidateResourcePolicyWithContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ValidateResourcePolicyInput is the validateResourcePolicyInput argument value.
			ValidateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput
			// Options is the options argument value.
			Options []request.Option
		}
	}
	lockCancelRotateSecret                      sync.RWMutex
	lockCancelRotateSecretRequest               sync.RWMutex
	lockCancelRotateSecretWithContext           sync.RWMutex
	lockCreateSecret                            sync.RWMutex
	lockCreateSecretRequest                     sync.RWMutex
	lockCreateSecretWithContext                 sync.RWMutex
	lockDeleteResourcePolicy                    sync.RWMutex
	lockDeleteResourcePolicyRequest             sync.RWMutex
	lockDeleteResourcePolicyWithContext         sync.RWMutex
	lockDeleteSecret                            sync.RWMutex
	lockDeleteSecretRequest                     sync.RWMutex
	lockDeleteSecretWithContext                 sync.RWMutex
	lockDescribeSecret                          sync.RWMutex
	lockDescribeSecretRequest                   sync.RWMutex
	lockDescribeSecretWithContext               sync.RWMutex
	lockGetRandomPassword                       sync.RWMutex
	lockGetRandomPasswordRequest                sync.RWMutex
	lockGetRandomPasswordWithContext            sync.RWMutex
	lockGetResourcePolicy                       sync.RWMutex
	lockGetResourcePolicyRequest                sync.RWMutex
	lockGetResourcePolicyWithContext            sync.RWMutex
	lockGetSecretValue                          sync.RWMutex
	lockGetSecretValueRequest                   sync.RWMutex
	lockGetSecretValueWithContext               sync.RWMutex
	lockListSecretVersionIds                    sync.RWMutex
	lockListSecretVersionIdsPages               sync.RWMutex
	lockListSecretVersionIdsPagesWithContext    sync.RWMutex
	lockListSecretVersionIdsRequest             sync.RWMutex
	lockListSecretVersionIdsWithContext         sync.RWMutex
	lockListSecrets                             sync.RWMutex
	lockListSecretsPages                        sync.RWMutex
	lockListSecretsPagesWithContext             sync.RWMutex
	lockListSecretsRequest                      sync.RWMutex
	lockListSecretsWithContext                  sync.RWMutex
	lockPutResourcePolicy                       sync.RWMutex
	lockPutResourcePolicyRequest                sync.RWMutex
	lockPutResourcePolicyWithContext            sync.RWMutex
	lockPutSecretValue                          sync.RWMutex
	lockPutSecretValueRequest                   sync.RWMutex
	lockPutSecretValueWithContext               sync.RWMutex
	lockRemoveRegionsFromReplication            sync.RWMutex
	lockRemoveRegionsFromReplicationRequest     sync.RWMutex
	lockRemoveRegionsFromReplicationWithContext sync.RWMutex
	lockReplicateSecretToRegions                sync.RWMutex
	lockReplicateSecretToRegionsRequest         sync.RWMutex
	lockReplicateSecretToRegionsWithContext     sync.RWMutex
	lockRestoreSecret                           sync.RWMutex
	lockRestoreSecretRequest                    sync.RWMutex
	lockRestoreSecretWithContext                sync.RWMutex
	lockRotateSecret                            sync.RWMutex
	lockRotateSecretRequest                     sync.RWMutex
	lockRotateSecretWithContext                 sync.RWMutex
	lockStopReplicationToReplica                sync.RWMutex
	lockStopReplicationToReplicaRequest         sync.RWMutex
	lockStopReplicationToReplicaWithContext     sync.RWMutex
	lockTagResource                             sync.RWMutex
	lockTagResourceRequest                      sync.RWMutex
	lockTagResourceWithContext                  sync.RWMutex
	lockUntagResource                           sync.RWMutex
	lockUntagResourceRequest                    sync.RWMutex
	lockUntagResourceWithContext                sync.RWMutex
	lockUpdateSecret                            sync.RWMutex
	lockUpdateSecretRequest                     sync.RWMutex
	lockUpdateSecretVersionStage                sync.RWMutex
	lockUpdateSecretVersionStageRequest         sync.RWMutex
	lockUpdateSecretVersionStageWithContext     sync.RWMutex
	lockUpdateSecretWithContext                 sync.RWMutex
	lockValidateResourcePolicy                  sync.RWMutex
	lockValidateResourcePolicyRequest           sync.RWMutex
	lockValidateResourcePolicyWithContext       sync.RWMutex
}

// CancelRotateSecret calls CancelRotateSecretFunc.
func (mock *SecretManagerClientMock) CancelRotateSecret(cancelRotateSecretInput *secretsmanager.CancelRotateSecretInput) (*secretsmanager.CancelRotateSecretOutput, error) {
	if mock.CancelRotateSecretFunc == nil {
		panic("SecretManagerClientMock.CancelRotateSecretFunc: method is nil but SecretManagerClient.CancelRotateSecret was just called")
	}
	callInfo := struct {
		CancelRotateSecretInput *secretsmanager.CancelRotateSecretInput
	}{
		CancelRotateSecretInput: cancelRotateSecretInput,
	}
	mock.lockCancelRotateSecret.Lock()
	mock.calls.CancelRotateSecret = append(mock.calls.CancelRotateSecret, callInfo)
	mock.lockCancelRotateSecret.Unlock()
	return mock.CancelRotateSecretFunc(cancelRotateSecretInput)
}

// CancelRotateSecretCalls gets all the calls that were made to CancelRotateSecret.
// Check the length with:
//
//	len(mockedSecretManagerClient.CancelRotateSecretCalls())
func (mock *SecretManagerClientMock) CancelRotateSecretCalls() []struct {
	CancelRotateSecretInput *secretsmanager.CancelRotateSecretInput
} {
	var calls []struct {
		CancelRotateSecretInput *secretsmanager.CancelRotateSecretInput
	}
	mock.lockCancelRotateSecret.RLock()
	calls = mock.calls.CancelRotateSecret
	mock.lockCancelRotateSecret.RUnlock()
	return calls
}

// CancelRotateSecretRequest calls CancelRotateSecretRequestFunc.
func (mock *SecretManagerClientMock) CancelRotateSecretRequest(cancelRotateSecretInput *secretsmanager.CancelRotateSecretInput) (*request.Request, *secretsmanager.CancelRotateSecretOutput) {
	if mock.CancelRotateSecretRequestFunc == nil {
		panic("SecretManagerClientMock.CancelRotateSecretRequestFunc: method is nil but SecretManagerClient.CancelRotateSecretRequest was just called")
	}
	callInfo := struct {
		CancelRotateSecretInput *secretsmanager.CancelRotateSecretInput
	}{
		CancelRotateSecretInput: cancelRotateSecretInput,
	}
	mock.lockCancelRotateSecretRequest.Lock()
	mock.calls.CancelRotateSecretRequest = append(mock.calls.CancelRotateSecretRequest, callInfo)
	mock.lockCancelRotateSecretRequest.Unlock()
	return mock.CancelRotateSecretRequestFunc(cancelRotateSecretInput)
}

// CancelRotateSecretRequestCalls gets all the calls that were made to CancelRotateSecretRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.CancelRotateSecretRequestCalls())
func (mock *SecretManagerClientMock) CancelRotateSecretRequestCalls() []struct {
	CancelRotateSecretInput *secretsmanager.CancelRotateSecretInput
} {
	var calls []struct {
		CancelRotateSecretInput *secretsmanager.CancelRotateSecretInput
	}
	mock.lockCancelRotateSecretRequest.RLock()
	calls = mock.calls.CancelRotateSecretRequest
	mock.lockCancelRotateSecretRequest.RUnlock()
	return calls
}

// CancelRotateSecretWithContext calls CancelRotateSecretWithContextFunc.
func (mock *SecretManagerClientMock) CancelRotateSecretWithContext(contextMoqParam context.Context, cancelRotateSecretInput *secretsmanager.CancelRotateSecretInput, options ...request.Option) (*secretsmanager.CancelRotateSecretOutput, error) {
	if mock.CancelRotateSecretWithContextFunc == nil {
		panic("SecretManagerClientMock.CancelRotateSecretWithContextFunc: method is nil but SecretManagerClient.CancelRotateSecretWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam         context.Context
		CancelRotateSecretInput *secretsmanager.CancelRotateSecretInput
		Options                 []request.Option
	}{
		ContextMoqParam:         contextMoqParam,
		CancelRotateSecretInput: cancelRotateSecretInput,
		Options:                 options,
	}
	mock.lockCancelRotateSecretWithContext.Lock()
	mock.calls.CancelRotateSecretWithContext = append(mock.calls.CancelRotateSecretWithContext, callInfo)
	mock.lockCancelRotateSecretWithContext.Unlock()
	return mock.CancelRotateSecretWithContextFunc(contextMoqParam, cancelRotateSecretInput, options...)
}

// CancelRotateSecretWithContextCalls gets all the calls that were made to CancelRotateSecretWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.CancelRotateSecretWithContextCalls())
func (mock *SecretManagerClientMock) CancelRotateSecretWithContextCalls() []struct {
	ContextMoqParam         context.Context
	CancelRotateSecretInput *secretsmanager.CancelRotateSecretInput
	Options                 []request.Option
} {
	var calls []struct {
		ContextMoqParam         context.Context
		CancelRotateSecretInput *secretsmanager.CancelRotateSecretInput
		Options                 []request.Option
	}
	mock.lockCancelRotateSecretWithContext.RLock()
	calls = mock.calls.CancelRotateSecretWithContext
	mock.lockCancelRotateSecretWithContext.RUnlock()
	return calls
}

// CreateSecret calls CreateSecretFunc.
func (mock *SecretManagerClientMock) CreateSecret(createSecretInput *secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error) {
	if mock.CreateSecretFunc == nil {
		panic("SecretManagerClientMock.CreateSecretFunc: method is nil but SecretManagerClient.CreateSecret was just called")
	}
	callInfo := struct {
		CreateSecretInput *secretsmanager.CreateSecretInput
	}{
		CreateSecretInput: createSecretInput,
	}
	mock.lockCreateSecret.Lock()
	mock.calls.CreateSecret = append(mock.calls.CreateSecret, callInfo)
	mock.lockCreateSecret.Unlock()
	return mock.CreateSecretFunc(createSecretInput)
}

// CreateSecretCalls gets all the calls that were made to CreateSecret.
// Check the length with:
//
//	len(mockedSecretManagerClient.CreateSecretCalls())
func (mock *SecretManagerClientMock) CreateSecretCalls() []struct {
	CreateSecretInput *secretsmanager.CreateSecretInput
} {
	var calls []struct {
		CreateSecretInput *secretsmanager.CreateSecretInput
	}
	mock.lockCreateSecret.RLock()
	calls = mock.calls.CreateSecret
	mock.lockCreateSecret.RUnlock()
	return calls
}

// CreateSecretRequest calls CreateSecretRequestFunc.
func (mock *SecretManagerClientMock) CreateSecretRequest(createSecretInput *secretsmanager.CreateSecretInput) (*request.Request, *secretsmanager.CreateSecretOutput) {
	if mock.CreateSecretRequestFunc == nil {
		panic("SecretManagerClientMock.CreateSecretRequestFunc: method is nil but SecretManagerClient.CreateSecretRequest was just called")
	}
	callInfo := struct {
		CreateSecretInput *secretsmanager.CreateSecretInput
	}{
		CreateSecretInput: createSecretInput,
	}
	mock.lockCreateSecretRequest.Lock()
	mock.calls.CreateSecretRequest = append(mock.calls.CreateSecretRequest, callInfo)
	mock.lockCreateSecretRequest.Unlock()
	return mock.CreateSecretRequestFunc(createSecretInput)
}

// CreateSecretRequestCalls gets all the calls that were made to CreateSecretRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.CreateSecretRequestCalls())
func (mock *SecretManagerClientMock) CreateSecretRequestCalls() []struct {
	CreateSecretInput *secretsmanager.CreateSecretInput
} {
	var calls []struct {
		CreateSecretInput *secretsmanager.CreateSecretInput
	}
	mock.lockCreateSecretRequest.RLock()
	calls = mock.calls.CreateSecretRequest
	mock.lockCreateSecretRequest.RUnlock()
	return calls
}

// CreateSecretWithContext calls CreateSecretWithContextFunc.
func (mock *SecretManagerClientMock) CreateSecretWithContext(contextMoqParam context.Context, createSecretInput *secretsmanager.CreateSecretInput, options ...request.Option) (*secretsmanager.CreateSecretOutput, error) {
	if mock.CreateSecretWithContextFunc == nil {
		panic("SecretManagerClientMock.CreateSecretWithContextFunc: method is nil but SecretManagerClient.CreateSecretWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		CreateSecretInput *secretsmanager.CreateSecretInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		CreateSecretInput: createSecretInput,
		Options:           options,
	}
	mock.lockCreateSecretWithContext.Lock()
	mock.calls.CreateSecretWithContext = append(mock.calls.CreateSecretWithContext, callInfo)
	mock.lockCreateSecretWithContext.Unlock()
	return mock.CreateSecretWithContextFunc(contextMoqParam, createSecretInput, options...)
}

// CreateSecretWithContextCalls gets all the calls that were made to CreateSecretWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.CreateSecretWithContextCalls())
func (mock *SecretManagerClientMock) CreateSecretWithContextCalls() []struct {
	ContextMoqParam   context.Context
	CreateSecretInput *secretsmanager.CreateSecretInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		CreateSecretInput *secretsmanager.CreateSecretInput
		Options           []request.Option
	}
	mock.lockCreateSecretWithContext.RLock()
	calls = mock.calls.CreateSecretWithContext
	mock.lockCreateSecretWithContext.RUnlock()
	return calls
}

// DeleteResourcePolicy calls DeleteResourcePolicyFunc.
func (mock *SecretManagerClientMock) DeleteResourcePolicy(deleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput) (*secretsmanager.DeleteResourcePolicyOutput, error) {
	if mock.DeleteResourcePolicyFunc == nil {
		panic("SecretManagerClientMock.DeleteResourcePolicyFunc: method is nil but SecretManagerClient.DeleteResourcePolicy was just called")
	}
	callInfo := struct {
		DeleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput
	}{
		DeleteResourcePolicyInput: deleteResourcePolicyInput,
	}
	mock.lockDeleteResourcePolicy.Lock()
	mock.calls.DeleteResourcePolicy = append(mock.calls.DeleteResourcePolicy, callInfo)
	mock.lockDeleteResourcePolicy.Unlock()
	return mock.DeleteResourcePolicyFunc(deleteResourcePolicyInput)
}

// DeleteResourcePolicyCalls gets all the calls that were made to DeleteResourcePolicy.
// Check the length with:
//
//	len(mockedSecretManagerClient.DeleteResourcePolicyCalls())
func (mock *SecretManagerClientMock) DeleteResourcePolicyCalls() []struct {
	DeleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput
} {
	var calls []struct {
		DeleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput
	}
	mock.lockDeleteResourcePolicy.RLock()
	calls = mock.calls.DeleteResourcePolicy
	mock.lockDeleteResourcePolicy.RUnlock()
	return calls
}

// DeleteResourcePolicyRequest calls DeleteResourcePolicyRequestFunc.
func (mock *SecretManagerClientMock) DeleteResourcePolicyRequest(deleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput) (*request.Request, *secretsmanager.DeleteResourcePolicyOutput) {
	if mock.DeleteResourcePolicyRequestFunc == nil {
		panic("SecretManagerClientMock.DeleteResourcePolicyRequestFunc: method is nil but SecretManagerClient.DeleteResourcePolicyRequest was just called")
	}
	callInfo := struct {
		DeleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput
	}{
		DeleteResourcePolicyInput: deleteResourcePolicyInput,
	}
	mock.lockDeleteResourcePolicyRequest.Lock()
	mock.calls.DeleteResourcePolicyRequest = append(mock.calls.DeleteResourcePolicyRequest, callInfo)
	mock.lockDeleteResourcePolicyRequest.Unlock()
	return mock.DeleteResourcePolicyRequestFunc(deleteResourcePolicyInput)
}

// DeleteResourcePolicyRequestCalls gets all the calls that were made to DeleteResourcePolicyRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.DeleteResourcePolicyRequestCalls())
func (mock *SecretManagerClientMock) DeleteResourcePolicyRequestCalls() []struct {
	DeleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput
} {
	var calls []struct {
		DeleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput
	}
	mock.lockDeleteResourcePolicyRequest.RLock()
	calls = mock.calls.DeleteResourcePolicyRequest
	mock.lockDeleteResourcePolicyRequest.RUnlock()
	return calls
}

// DeleteResourcePolicyWithContext calls DeleteResourcePolicyWithContextFunc.
func (mock *SecretManagerClientMock) DeleteResourcePolicyWithContext(contextMoqParam context.Context, deleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput, options ...request.Option) (*secretsmanager.DeleteResourcePolicyOutput, error) {
	if mock.DeleteResourcePolicyWithContextFunc == nil {
		panic("SecretManagerClientMock.DeleteResourcePolicyWithContextFunc: method is nil but SecretManagerClient.DeleteResourcePolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		DeleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		DeleteResourcePolicyInput: deleteResourcePolicyInput,
		Options:                   options,
	}
	mock.lockDeleteResourcePolicyWithContext.Lock()
	mock.calls.DeleteResourcePolicyWithContext = append(mock.calls.DeleteResourcePolicyWithContext, callInfo)
	mock.lockDeleteResourcePolicyWithContext.Unlock()
	return mock.DeleteResourcePolicyWithContextFunc(contextMoqParam, deleteResourcePolicyInput, options...)
}

// DeleteResourcePolicyWithContextCalls gets all the calls that were made to DeleteResourcePolicyWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.DeleteResourcePolicyWithContextCalls())
func (mock *SecretManagerClientMock) DeleteResourcePolicyWithContextCalls() []struct {
	ContextMoqParam           context.Context
	DeleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		DeleteResourcePolicyInput *secretsmanager.DeleteResourcePolicyInput
		Options                   []request.Option
	}
	mock.lockDeleteResourcePolicyWithContext.RLock()
	calls = mock.calls.DeleteResourcePolicyWithContext
	mock.lockDeleteResourcePolicyWithContext.RUnlock()
	return calls
}

// DeleteSecret calls DeleteSecretFunc.
func (mock *SecretManagerClientMock) DeleteSecret(deleteSecretInput *secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error) {
	if mock.DeleteSecretFunc == nil {
		panic("SecretManagerClientMock.DeleteSecretFunc: method is nil but SecretManagerClient.DeleteSecret was just called")
	}
	callInfo := struct {
		DeleteSecretInput *secretsmanager.DeleteSecretInput
	}{
		DeleteSecretInput: deleteSecretInput,
	}
	mock.lockDeleteSecret.Lock()
	mock.calls.DeleteSecret = append(mock.calls.DeleteSecret, callInfo)
	mock.lockDeleteSecret.Unlock()
	return mock.DeleteSecretFunc(deleteSecretInput)
}

// DeleteSecretCalls gets all the calls that were made to DeleteSecret.
// Check the length with:
//
//	len(mockedSecretManagerClient.DeleteSecretCalls())
func (mock *SecretManagerClientMock) DeleteSecretCalls() []struct {
	DeleteSecretInput *secretsmanager.DeleteSecretInput
} {
	var calls []struct {
		DeleteSecretInput *secretsmanager.DeleteSecretInput
	}
	mock.lockDeleteSecret.RLock()
	calls = mock.calls.DeleteSecret
	mock.lockDeleteSecret.RUnlock()
	return calls
}

// DeleteSecretRequest calls DeleteSecretRequestFunc.
func (mock *SecretManagerClientMock) DeleteSecretRequest(deleteSecretInput *secretsmanager.DeleteSecretInput) (*request.Request, *secretsmanager.DeleteSecretOutput) {
	if mock.DeleteSecretRequestFunc == nil {
		panic("SecretManagerClientMock.DeleteSecretRequestFunc: method is nil but SecretManagerClient.DeleteSecretRequest was just called")
	}
	callInfo := struct {
		DeleteSecretInput *secretsmanager.DeleteSecretInput
	}{
		DeleteSecretInput: deleteSecretInput,
	}
	mock.lockDeleteSecretRequest.Lock()
	mock.calls.DeleteSecretRequest = append(mock.calls.DeleteSecretRequest, callInfo)
	mock.lockDeleteSecretRequest.Unlock()
	return mock.DeleteSecretRequestFunc(deleteSecretInput)
}

// DeleteSecretRequestCalls gets all the calls that were made to DeleteSecretRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.DeleteSecretRequestCalls())
func (mock *SecretManagerClientMock) DeleteSecretRequestCalls() []struct {
	DeleteSecretInput *secretsmanager.DeleteSecretInput
} {
	var calls []struct {
		DeleteSecretInput *secretsmanager.DeleteSecretInput
	}
	mock.lockDeleteSecretRequest.RLock()
	calls = mock.calls.DeleteSecretRequest
	mock.lockDeleteSecretRequest.RUnlock()
	return calls
}

// DeleteSecretWithContext calls DeleteSecretWithContextFunc.
func (mock *SecretManagerClientMock) DeleteSecretWithContext(contextMoqParam context.Context, deleteSecretInput *secretsmanager.DeleteSecretInput, options ...request.Option) (*secretsmanager.DeleteSecretOutput, error) {
	if mock.DeleteSecretWithContextFunc == nil {
		panic("SecretManagerClientMock.DeleteSecretWithContextFunc: method is nil but SecretManagerClient.DeleteSecretWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		DeleteSecretInput *secretsmanager.DeleteSecretInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		DeleteSecretInput: deleteSecretInput,
		Options:           options,
	}
	mock.lockDeleteSecretWithContext.Lock()
	mock.calls.DeleteSecretWithContext = append(mock.calls.DeleteSecretWithContext, callInfo)
	mock.lockDeleteSecretWithContext.Unlock()
	return mock.DeleteSecretWithContextFunc(contextMoqParam, deleteSecretInput, options...)
}

// DeleteSecretWithContextCalls gets all the calls that were made to DeleteSecretWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.DeleteSecretWithContextCalls())
func (mock *SecretManagerClientMock) DeleteSecretWithContextCalls() []struct {
	ContextMoqParam   context.Context
	DeleteSecretInput *secretsmanager.DeleteSecretInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		DeleteSecretInput *secretsmanager.DeleteSecretInput
		Options           []request.Option
	}
	mock.lockDeleteSecretWithContext.RLock()
	calls = mock.calls.DeleteSecretWithContext
	mock.lockDeleteSecretWithContext.RUnlock()
	return calls
}

// DescribeSecret calls DescribeSecretFunc.
func (mock *SecretManagerClientMock) DescribeSecret(describeSecretInput *secretsmanager.DescribeSecretInput) (*secretsmanager.DescribeSecretOutput, error) {
	if mock.DescribeSecretFunc == nil {
		panic("SecretManagerClientMock.DescribeSecretFunc: method is nil but SecretManagerClient.DescribeSecret was just called")
	}
	callInfo := struct {
		DescribeSecretInput *secretsmanager.DescribeSecretInput
	}{
		DescribeSecretInput: describeSecretInput,
	}
	mock.lockDescribeSecret.Lock()
	mock.calls.DescribeSecret = append(mock.calls.DescribeSecret, callInfo)
	mock.lockDescribeSecret.Unlock()
	return mock.DescribeSecretFunc(describeSecretInput)
}

// DescribeSecretCalls gets all the calls that were made to DescribeSecret.
// Check the length with:
//
//	len(mockedSecretManagerClient.DescribeSecretCalls())
func (mock *SecretManagerClientMock) DescribeSecretCalls() []struct {
	DescribeSecretInput *secretsmanager.DescribeSecretInput
} {
	var calls []struct {
		DescribeSecretInput *secretsmanager.DescribeSecretInput
	}
	mock.lockDescribeSecret.RLock()
	calls = mock.calls.DescribeSecret
	mock.lockDescribeSecret.RUnlock()
	return calls
}

// DescribeSecretRequest calls DescribeSecretRequestFunc.
func (mock *SecretManagerClientMock) DescribeSecretRequest(describeSecretInput *secretsmanager.DescribeSecretInput) (*request.Request, *secretsmanager.DescribeSecretOutput) {
	if mock.DescribeSecretRequestFunc == nil {
		panic("SecretManagerClientMock.DescribeSecretRequestFunc: method is nil but SecretManagerClient.DescribeSecretRequest was just called")
	}
	callInfo := struct {
		DescribeSecretInput *secretsmanager.DescribeSecretInput
	}{
		DescribeSecretInput: describeSecretInput,
	}
	mock.lockDescribeSecretRequest.Lock()
	mock.calls.DescribeSecretRequest = append(mock.calls.DescribeSecretRequest, callInfo)
	mock.lockDescribeSecretRequest.Unlock()
	return mock.DescribeSecretRequestFunc(describeSecretInput)
}

// DescribeSecretRequestCalls gets all the calls that were made to DescribeSecretRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.DescribeSecretRequestCalls())
func (mock *SecretManagerClientMock) DescribeSecretRequestCalls() []struct {
	DescribeSecretInput *secretsmanager.DescribeSecretInput
} {
	var calls []struct {
		DescribeSecretInput *secretsmanager.DescribeSecretInput
	}
	mock.lockDescribeSecretRequest.RLock()
	calls = mock.calls.DescribeSecretRequest
	mock.lockDescribeSecretRequest.RUnlock()
	return calls
}

// DescribeSecretWithContext calls DescribeSecretWithContextFunc.
func (mock *SecretManagerClientMock) DescribeSecretWithContext(contextMoqParam context.Context, describeSecretInput *secretsmanager.DescribeSecretInput, options ...request.Option) (*secretsmanager.DescribeSecretOutput, error) {
	if mock.DescribeSecretWithContextFunc == nil {
		panic("SecretManagerClientMock.DescribeSecretWithContextFunc: method is nil but SecretManagerClient.DescribeSecretWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		DescribeSecretInput *secretsmanager.DescribeSecretInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		DescribeSecretInput: describeSecretInput,
		Options:             options,
	}
	mock.lockDescribeSecretWithContext.Lock()
	mock.calls.DescribeSecretWithContext = append(mock.calls.DescribeSecretWithContext, callInfo)
	mock.lockDescribeSecretWithContext.Unlock()
	return mock.DescribeSecretWithContextFunc(contextMoqParam, describeSecretInput, options...)
}

// DescribeSecretWithContextCalls gets all the calls that were made to DescribeSecretWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.DescribeSecretWithContextCalls())
func (mock *SecretManagerClientMock) DescribeSecretWithContextCalls() []struct {
	ContextMoqParam     context.Context
	DescribeSecretInput *secretsmanager.DescribeSecretInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		DescribeSecretInput *secretsmanager.DescribeSecretInput
		Options             []request.Option
	}
	mock.lockDescribeSecretWithContext.RLock()
	calls = mock.calls.DescribeSecretWithContext
	mock.lockDescribeSecretWithContext.RUnlock()
	return calls
}

// GetRandomPassword calls GetRandomPasswordFunc.
func (mock *SecretManagerClientMock) GetRandomPassword(getRandomPasswordInput *secretsmanager.GetRandomPasswordInput) (*secretsmanager.GetRandomPasswordOutput, error) {
	if mock.GetRandomPasswordFunc == nil {
		panic("SecretManagerClientMock.GetRandomPasswordFunc: method is nil but SecretManagerClient.GetRandomPassword was just called")
	}
	callInfo := struct {
		GetRandomPasswordInput *secretsmanager.GetRandomPasswordInput
	}{
		GetRandomPasswordInput: getRandomPasswordInput,
	}
	mock.lockGetRandomPassword.Lock()
	mock.calls.GetRandomPassword = append(mock.calls.GetRandomPassword, callInfo)
	mock.lockGetRandomPassword.Unlock()
	return mock.GetRandomPasswordFunc(getRandomPasswordInput)
}

// GetRandomPasswordCalls gets all the calls that were made to GetRandomPassword.
// Check the length with:
//
//	len(mockedSecretManagerClient.GetRandomPasswordCalls())
func (mock *SecretManagerClientMock) GetRandomPasswordCalls() []struct {
	GetRandomPasswordInput *secretsmanager.GetRandomPasswordInput
} {
	var calls []struct {
		GetRandomPasswordInput *secretsmanager.GetRandomPasswordInput
	}
	mock.lockGetRandomPassword.RLock()
	calls = mock.calls.GetRandomPassword
	mock.lockGetRandomPassword.RUnlock()
	return calls
}

// GetRandomPasswordRequest calls GetRandomPasswordRequestFunc.
func (mock *SecretManagerClientMock) GetRandomPasswordRequest(getRandomPasswordInput *secretsmanager.GetRandomPasswordInput) (*request.Request, *secretsmanager.GetRandomPasswordOutput) {
	if mock.GetRandomPasswordRequestFunc == nil {
		panic("SecretManagerClientMock.GetRandomPasswordRequestFunc: method is nil but SecretManagerClient.GetRandomPasswordRequest was just called")
	}
	callInfo := struct {
		GetRandomPasswordInput *secretsmanager.GetRandomPasswordInput
	}{
		GetRandomPasswordInput: getRandomPasswordInput,
	}
	mock.lockGetRandomPasswordRequest.Lock()
	mock.calls.GetRandomPasswordRequest = append(mock.calls.GetRandomPasswordRequest, callInfo)
	mock.lockGetRandomPasswordRequest.Unlock()
	return mock.GetRandomPasswordRequestFunc(getRandomPasswordInput)
}

// GetRandomPasswordRequestCalls gets all the calls that were made to GetRandomPasswordRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.GetRandomPasswordRequestCalls())
func (mock *SecretManagerClientMock) GetRandomPasswordRequestCalls() []struct {
	GetRandomPasswordInput *secretsmanager.GetRandomPasswordInput
} {
	var calls []struct {
		GetRandomPasswordInput *secretsmanager.GetRandomPasswordInput
	}
	mock.lockGetRandomPasswordRequest.RLock()
	calls = mock.calls.GetRandomPasswordRequest
	mock.lockGetRandomPasswordRequest.RUnlock()
	return calls
}

// GetRandomPasswordWithContext calls GetRandomPasswordWithContextFunc.
func (mock *SecretManagerClientMock) GetRandomPasswordWithContext(contextMoqParam context.Context, getRandomPasswordInput *secretsmanager.GetRandomPasswordInput, options ...request.Option) (*secretsmanager.GetRandomPasswordOutput, error) {
	if mock.GetRandomPasswordWithContextFunc == nil {
		panic("SecretManagerClientMock.GetRandomPasswordWithContextFunc: method is nil but SecretManagerClient.GetRandomPasswordWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		GetRandomPasswordInput *secretsmanager.GetRandomPasswordInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		GetRandomPasswordInput: getRandomPasswordInput,
		Options:                options,
	}
	mock.lockGetRandomPasswordWithContext.Lock()
	mock.calls.GetRandomPasswordWithContext = append(mock.calls.GetRandomPasswordWithContext, callInfo)
	mock.lockGetRandomPasswordWithContext.Unlock()
	return mock.GetRandomPasswordWithContextFunc(contextMoqParam, getRandomPasswordInput, options...)
}

// GetRandomPasswordWithContextCalls gets all the calls that were made to GetRandomPasswordWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.GetRandomPasswordWithContextCalls())
func (mock *SecretManagerClientMock) GetRandomPasswordWithContextCalls() []struct {
	ContextMoqParam        context.Context
	GetRandomPasswordInput *secretsmanager.GetRandomPasswordInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		GetRandomPasswordInput *secretsmanager.GetRandomPasswordInput
		Options                []request.Option
	}
	mock.lockGetRandomPasswordWithContext.RLock()
	calls = mock.calls.GetRandomPasswordWithContext
	mock.lockGetRandomPasswordWithContext.RUnlock()
	return calls
}

// GetResourcePolicy calls GetResourcePolicyFunc.
func (mock *SecretManagerClientMock) GetResourcePolicy(getResourcePolicyInput *secretsmanager.GetResourcePolicyInput) (*secretsmanager.GetResourcePolicyOutput, error) {
	if mock.GetResourcePolicyFunc == nil {
		panic("SecretManagerClientMock.GetResourcePolicyFunc: method is nil but SecretManagerClient.GetResourcePolicy was just called")
	}
	callInfo := struct {
		GetResourcePolicyInput *secretsmanager.GetResourcePolicyInput
	}{
		GetResourcePolicyInput: getResourcePolicyInput,
	}
	mock.lockGetResourcePolicy.Lock()
	mock.calls.GetResourcePolicy = append(mock.calls.GetResourcePolicy, callInfo)
	mock.lockGetResourcePolicy.Unlock()
	return mock.GetResourcePolicyFunc(getResourcePolicyInput)
}

// GetResourcePolicyCalls gets all the calls that were made to GetResourcePolicy.
// Check the length with:
//
//	len(mockedSecretManagerClient.GetResourcePolicyCalls())
func (mock *SecretManagerClientMock) GetResourcePolicyCalls() []struct {
	GetResourcePolicyInput *secretsmanager.GetResourcePolicyInput
} {
	var calls []struct {
		GetResourcePolicyInput *secretsmanager.GetResourcePolicyInput
	}
	mock.lockGetResourcePolicy.RLock()
	calls = mock.calls.GetResourcePolicy
	mock.lockGetResourcePolicy.RUnlock()
	return calls
}

// GetResourcePolicyRequest calls GetResourcePolicyRequestFunc.
func (mock *SecretManagerClientMock) GetResourcePolicyRequest(getResourcePolicyInput *secretsmanager.GetResourcePolicyInput) (*request.Request, *secretsmanager.GetResourcePolicyOutput) {
	if mock.GetResourcePolicyRequestFunc == nil {
		panic("SecretManagerClientMock.GetResourcePolicyRequestFunc: method is nil but SecretManagerClient.GetResourcePolicyRequest was just called")
	}
	callInfo := struct {
		GetResourcePolicyInput *secretsmanager.GetResourcePolicyInput
	}{
		GetResourcePolicyInput: getResourcePolicyInput,
	}
	mock.lockGetResourcePolicyRequest.Lock()
	mock.calls.GetResourcePolicyRequest = append(mock.calls.GetResourcePolicyRequest, callInfo)
	mock.lockGetResourcePolicyRequest.Unlock()
	return mock.GetResourcePolicyRequestFunc(getResourcePolicyInput)
}

// GetResourcePolicyRequestCalls gets all the calls that were made to GetResourcePolicyRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.GetResourcePolicyRequestCalls())
func (mock *SecretManagerClientMock) GetResourcePolicyRequestCalls() []struct {
	GetResourcePolicyInput *secretsmanager.GetResourcePolicyInput
} {
	var calls []struct {
		GetResourcePolicyInput *secretsmanager.GetResourcePolicyInput
	}
	mock.lockGetResourcePolicyRequest.RLock()
	calls = mock.calls.GetResourcePolicyRequest
	mock.lockGetResourcePolicyRequest.RUnlock()
	return calls
}

// GetResourcePolicyWithContext calls GetResourcePolicyWithContextFunc.
func (mock *SecretManagerClientMock) GetResourcePolicyWithContext(contextMoqParam context.Context, getResourcePolicyInput *secretsmanager.GetResourcePolicyInput, options ...request.Option) (*secretsmanager.GetResourcePolicyOutput, error) {
	if mock.GetResourcePolicyWithContextFunc == nil {
		panic("SecretManagerClientMock.GetResourcePolicyWithContextFunc: method is nil but SecretManagerClient.GetResourcePolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		GetResourcePolicyInput *secretsmanager.GetResourcePolicyInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		GetResourcePolicyInput: getResourcePolicyInput,
		Options:                options,
	}
	mock.lockGetResourcePolicyWithContext.Lock()
	mock.calls.GetResourcePolicyWithContext = append(mock.calls.GetResourcePolicyWithContext, callInfo)
	mock.lockGetResourcePolicyWithContext.Unlock()
	return mock.GetResourcePolicyWithContextFunc(contextMoqParam, getResourcePolicyInput, options...)
}

// GetResourcePolicyWithContextCalls gets all the calls that were made to GetResourcePolicyWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.GetResourcePolicyWithContextCalls())
func (mock *SecretManagerClientMock) GetResourcePolicyWithContextCalls() []struct {
	ContextMoqParam        context.Context
	GetResourcePolicyInput *secretsmanager.GetResourcePolicyInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		GetResourcePolicyInput *secretsmanager.GetResourcePolicyInput
		Options                []request.Option
	}
	mock.lockGetResourcePolicyWithContext.RLock()
	calls = mock.calls.GetResourcePolicyWithContext
	mock.lockGetResourcePolicyWithContext.RUnlock()
	return calls
}

// GetSecretValue calls GetSecretValueFunc.
func (mock *SecretManagerClientMock) GetSecretValue(getSecretValueInput *secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error) {
	if mock.GetSecretValueFunc == nil {
		panic("SecretManagerClientMock.GetSecretValueFunc: method is nil but SecretManagerClient.GetSecretValue was just called")
	}
	callInfo := struct {
		GetSecretValueInput *secretsmanager.GetSecretValueInput
	}{
		GetSecretValueInput: getSecretValueInput,
	}
	mock.lockGetSecretValue.Lock()
	mock.calls.GetSecretValue = append(mock.calls.GetSecretValue, callInfo)
	mock.lockGetSecretValue.Unlock()
	return mock.GetSecretValueFunc(getSecretValueInput)
}

// GetSecretValueCalls gets all the calls that were made to GetSecretValue.
// Check the length with:
//
//	len(mockedSecretManagerClient.GetSecretValueCalls())
func (mock *SecretManagerClientMock) GetSecretValueCalls() []struct {
	GetSecretValueInput *secretsmanager.GetSecretValueInput
} {
	var calls []struct {
		GetSecretValueInput *secretsmanager.GetSecretValueInput
	}
	mock.lockGetSecretValue.RLock()
	calls = mock.calls.GetSecretValue
	mock.lockGetSecretValue.RUnlock()
	return calls
}

// GetSecretValueRequest calls GetSecretValueRequestFunc.
func (mock *SecretManagerClientMock) GetSecretValueRequest(getSecretValueInput *secretsmanager.GetSecretValueInput) (*request.Request, *secretsmanager.GetSecretValueOutput) {
	if mock.GetSecretValueRequestFunc == nil {
		panic("SecretManagerClientMock.GetSecretValueRequestFunc: method is nil but SecretManagerClient.GetSecretValueRequest was just called")
	}
	callInfo := struct {
		GetSecretValueInput *secretsmanager.GetSecretValueInput
	}{
		GetSecretValueInput: getSecretValueInput,
	}
	mock.lockGetSecretValueRequest.Lock()
	mock.calls.GetSecretValueRequest = append(mock.calls.GetSecretValueRequest, callInfo)
	mock.lockGetSecretValueRequest.Unlock()
	return mock.GetSecretValueRequestFunc(getSecretValueInput)
}

// GetSecretValueRequestCalls gets all the calls that were made to GetSecretValueRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.GetSecretValueRequestCalls())
func (mock *SecretManagerClientMock) GetSecretValueRequestCalls() []struct {
	GetSecretValueInput *secretsmanager.GetSecretValueInput
} {
	var calls []struct {
		GetSecretValueInput *secretsmanager.GetSecretValueInput
	}
	mock.lockGetSecretValueRequest.RLock()
	calls = mock.calls.GetSecretValueRequest
	mock.lockGetSecretValueRequest.RUnlock()
	return calls
}

// GetSecretValueWithContext calls GetSecretValueWithContextFunc.
func (mock *SecretManagerClientMock) GetSecretValueWithContext(contextMoqParam context.Context, getSecretValueInput *secretsmanager.GetSecretValueInput, options ...request.Option) (*secretsmanager.GetSecretValueOutput, error) {
	if mock.GetSecretValueWithContextFunc == nil {
		panic("SecretManagerClientMock.GetSecretValueWithContextFunc: method is nil but SecretManagerClient.GetSecretValueWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		GetSecretValueInput *secretsmanager.GetSecretValueInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		GetSecretValueInput: getSecretValueInput,
		Options:             options,
	}
	mock.lockGetSecretValueWithContext.Lock()
	mock.calls.GetSecretValueWithContext = append(mock.calls.GetSecretValueWithContext, callInfo)
	mock.lockGetSecretValueWithContext.Unlock()
	return mock.GetSecretValueWithContextFunc(contextMoqParam, getSecretValueInput, options...)
}

// GetSecretValueWithContextCalls gets all the calls that were made to GetSecretValueWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.GetSecretValueWithContextCalls())
func (mock *SecretManagerClientMock) GetSecretValueWithContextCalls() []struct {
	ContextMoqParam     context.Context
	GetSecretValueInput *secretsmanager.GetSecretValueInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		GetSecretValueInput *secretsmanager.GetSecretValueInput
		Options             []request.Option
	}
	mock.lockGetSecretValueWithContext.RLock()
	calls = mock.calls.GetSecretValueWithContext
	mock.lockGetSecretValueWithContext.RUnlock()
	return calls
}

// ListSecretVersionIds calls ListSecretVersionIdsFunc.
func (mock *SecretManagerClientMock) ListSecretVersionIds(listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	if mock.ListSecretVersionIdsFunc == nil {
		panic("SecretManagerClientMock.ListSecretVersionIdsFunc: method is nil but SecretManagerClient.ListSecretVersionIds was just called")
	}
	callInfo := struct {
		ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
	}{
		ListSecretVersionIdsInput: listSecretVersionIdsInput,
	}
	mock.lockListSecretVersionIds.Lock()
	mock.calls.ListSecretVersionIds = append(mock.calls.ListSecretVersionIds, callInfo)
	mock.lockListSecretVersionIds.Unlock()
	return mock.ListSecretVersionIdsFunc(listSecretVersionIdsInput)
}

// ListSecretVersionIdsCalls gets all the calls that were made to ListSecretVersionIds.
// Check the length with:
//
//	len(mockedSecretManagerClient.ListSecretVersionIdsCalls())
func (mock *SecretManagerClientMock) ListSecretVersionIdsCalls() []struct {
	ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
} {
	var calls []struct {
		ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
	}
	mock.lockListSecretVersionIds.RLock()
	calls = mock.calls.ListSecretVersionIds
	mock.lockListSecretVersionIds.RUnlock()
	return calls
}

// ListSecretVersionIdsPages calls ListSecretVersionIdsPagesFunc.
func (mock *SecretManagerClientMock) ListSecretVersionIdsPages(listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput, fn func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool) error {
	if mock.ListSecretVersionIdsPagesFunc == nil {
		panic("SecretManagerClientMock.ListSecretVersionIdsPagesFunc: method is nil but SecretManagerClient.ListSecretVersionIdsPages was just called")
	}
	callInfo := struct {
		ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
		Fn                        func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool
	}{
		ListSecretVersionIdsInput: listSecretVersionIdsInput,
		Fn:                        fn,
	}
	mock.lockListSecretVersionIdsPages.Lock()
	mock.calls.ListSecretVersionIdsPages = append(mock.calls.ListSecretVersionIdsPages, callInfo)
	mock.lockListSecretVersionIdsPages.Unlock()
	return mock.ListSecretVersionIdsPagesFunc(listSecretVersionIdsInput, fn)
}

// ListSecretVersionIdsPagesCalls gets all the calls that were made to ListSecretVersionIdsPages.
// Check the length with:
//
//	len(mockedSecretManagerClient.ListSecretVersionIdsPagesCalls())
func (mock *SecretManagerClientMock) ListSecretVersionIdsPagesCalls() []struct {
	ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
	Fn                        func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool
} {
	var calls []struct {
		ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
		Fn                        func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool
	}
	mock.lockListSecretVersionIdsPages.RLock()
	calls = mock.calls.ListSecretVersionIdsPages
	mock.lockListSecretVersionIdsPages.RUnlock()
	return calls
}

// ListSecretVersionIdsPagesWithContext calls ListSecretVersionIdsPagesWithContextFunc.
func (mock *SecretManagerClientMock) ListSecretVersionIdsPagesWithContext(contextMoqParam context.Context, listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput, fn func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool, options ...request.Option) error {
	if mock.ListSecretVersionIdsPagesWithContextFunc == nil {
		panic("SecretManagerClientMock.ListSecretVersionIdsPagesWithContextFunc: method is nil but SecretManagerClient.ListSecretVersionIdsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
		Fn                        func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		ListSecretVersionIdsInput: listSecretVersionIdsInput,
		Fn:                        fn,
		Options:                   options,
	}
	mock.lockListSecretVersionIdsPagesWithContext.Lock()
	mock.calls.ListSecretVersionIdsPagesWithContext = append(mock.calls.ListSecretVersionIdsPagesWithContext, callInfo)
	mock.lockListSecretVersionIdsPagesWithContext.Unlock()
	return mock.ListSecretVersionIdsPagesWithContextFunc(contextMoqParam, listSecretVersionIdsInput, fn, options...)
}

// ListSecretVersionIdsPagesWithContextCalls gets all the calls that were made to ListSecretVersionIdsPagesWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.ListSecretVersionIdsPagesWithContextCalls())
func (mock *SecretManagerClientMock) ListSecretVersionIdsPagesWithContextCalls() []struct {
	ContextMoqParam           context.Context
	ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
	Fn                        func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
		Fn                        func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool
		Options                   []request.Option
	}
	mock.lockListSecretVersionIdsPagesWithContext.RLock()
	calls = mock.calls.ListSecretVersionIdsPagesWithContext
	mock.lockListSecretVersionIdsPagesWithContext.RUnlock()
	return calls
}

// ListSecretVersionIdsRequest calls ListSecretVersionIdsRequestFunc.
func (mock *SecretManagerClientMock) ListSecretVersionIdsRequest(listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput) (*request.Request, *secretsmanager.ListSecretVersionIdsOutput) {
	if mock.ListSecretVersionIdsRequestFunc == nil {
		panic("SecretManagerClientMock.ListSecretVersionIdsRequestFunc: method is nil but SecretManagerClient.ListSecretVersionIdsRequest was just called")
	}
	callInfo := struct {
		ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
	}{
		ListSecretVersionIdsInput: listSecretVersionIdsInput,
	}
	mock.lockListSecretVersionIdsRequest.Lock()
	mock.calls.ListSecretVersionIdsRequest = append(mock.calls.ListSecretVersionIdsRequest, callInfo)
	mock.lockListSecretVersionIdsRequest.Unlock()
	return mock.ListSecretVersionIdsRequestFunc(listSecretVersionIdsInput)
}

// ListSecretVersionIdsRequestCalls gets all the calls that were made to ListSecretVersionIdsRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.ListSecretVersionIdsRequestCalls())
func (mock *SecretManagerClientMock) ListSecretVersionIdsRequestCalls() []struct {
	ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
} {
	var calls []struct {
		ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
	}
	mock.lockListSecretVersionIdsRequest.RLock()
	calls = mock.calls.ListSecretVersionIdsRequest
	mock.lockListSecretVersionIdsRequest.RUnlock()
	return calls
}

// ListSecretVersionIdsWithContext calls ListSecretVersionIdsWithContextFunc.
func (mock *SecretManagerClientMock) ListSecretVersionIdsWithContext(contextMoqParam context.Context, listSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput, options ...request.Option) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	if mock.ListSecretVersionIdsWithContextFunc == nil {
		panic("SecretManagerClientMock.ListSecretVersionIdsWithContextFunc: method is nil but SecretManagerClient.ListSecretVersionIdsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam           context.Context
		ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
		Options                   []request.Option
	}{
		ContextMoqParam:           contextMoqParam,
		ListSecretVersionIdsInput: listSecretVersionIdsInput,
		Options:                   options,
	}
	mock.lockListSecretVersionIdsWithContext.Lock()
	mock.calls.ListSecretVersionIdsWithContext = append(mock.calls.ListSecretVersionIdsWithContext, callInfo)
	mock.lockListSecretVersionIdsWithContext.Unlock()
	return mock.ListSecretVersionIdsWithContextFunc(contextMoqParam, listSecretVersionIdsInput, options...)
}

// ListSecretVersionIdsWithContextCalls gets all the calls that were made to ListSecretVersionIdsWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.ListSecretVersionIdsWithContextCalls())
func (mock *SecretManagerClientMock) ListSecretVersionIdsWithContextCalls() []struct {
	ContextMoqParam           context.Context
	ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
	Options                   []request.Option
} {
	var calls []struct {
		ContextMoqParam           context.Context
		ListSecretVersionIdsInput *secretsmanager.ListSecretVersionIdsInput
		Options                   []request.Option
	}
	mock.lockListSecretVersionIdsWithContext.RLock()
	calls = mock.calls.ListSecretVersionIdsWithContext
	mock.lockListSecretVersionIdsWithContext.RUnlock()
	return calls
}

// ListSecrets calls ListSecretsFunc.
func (mock *SecretManagerClientMock) ListSecrets(listSecretsInput *secretsmanager.ListSecretsInput) (*secretsmanager.ListSecretsOutput, error) {
	if mock.ListSecretsFunc == nil {
		panic("SecretManagerClientMock.ListSecretsFunc: method is nil but SecretManagerClient.ListSecrets was just called")
	}
	callInfo := struct {
		ListSecretsInput *secretsmanager.ListSecretsInput
	}{
		ListSecretsInput: listSecretsInput,
	}
	mock.lockListSecrets.Lock()
	mock.calls.ListSecrets = append(mock.calls.ListSecrets, callInfo)
	mock.lockListSecrets.Unlock()
	return mock.ListSecretsFunc(listSecretsInput)
}

// ListSecretsCalls gets all the calls that were made to ListSecrets.
// Check the length with:
//
//	len(mockedSecretManagerClient.ListSecretsCalls())
func (mock *SecretManagerClientMock) ListSecretsCalls() []struct {
	ListSecretsInput *secretsmanager.ListSecretsInput
} {
	var calls []struct {
		ListSecretsInput *secretsmanager.ListSecretsInput
	}
	mock.lockListSecrets.RLock()
	calls = mock.calls.ListSecrets
	mock.lockListSecrets.RUnlock()
	return calls
}

// ListSecretsPages calls ListSecretsPagesFunc.
func (mock *SecretManagerClientMock) ListSecretsPages(listSecretsInput *secretsmanager.ListSecretsInput, fn func(*secretsmanager.ListSecretsOutput, bool) bool) error {
	if mock.ListSecretsPagesFunc == nil {
		panic("SecretManagerClientMock.ListSecretsPagesFunc: method is nil but SecretManagerClient.ListSecretsPages was just called")
	}
	callInfo := struct {
		ListSecretsInput *secretsmanager.ListSecretsInput
		Fn               func(*secretsmanager.ListSecretsOutput, bool) bool
	}{
		ListSecretsInput: listSecretsInput,
		Fn:               fn,
	}
	mock.lockListSecretsPages.Lock()
	mock.calls.ListSecretsPages = append(mock.calls.ListSecretsPages, callInfo)
	mock.lockListSecretsPages.Unlock()
	return mock.ListSecretsPagesFunc(listSecretsInput, fn)
}

// ListSecretsPagesCalls gets all the calls that were made to ListSecretsPages.
// Check the length with:
//
//	len(mockedSecretManagerClient.ListSecretsPagesCalls())
func (mock *SecretManagerClientMock) ListSecretsPagesCalls() []struct {
	ListSecretsInput *secretsmanager.ListSecretsInput
	Fn               func(*secretsmanager.ListSecretsOutput, bool) bool
} {
	var calls []struct {
		ListSecretsInput *secretsmanager.ListSecretsInput
		Fn               func(*secretsmanager.ListSecretsOutput, bool) bool
	}
	mock.lockListSecretsPages.RLock()
	calls = mock.calls.ListSecretsPages
	mock.lockListSecretsPages.RUnlock()
	return calls
}

// ListSecretsPagesWithContext calls ListSecretsPagesWithContextFunc.
func (mock *SecretManagerClientMock) ListSecretsPagesWithContext(contextMoqParam context.Context, listSecretsInput *secretsmanager.ListSecretsInput, fn func(*secretsmanager.ListSecretsOutput, bool) bool, options ...request.Option) error {
	if mock.ListSecretsPagesWithContextFunc == nil {
		panic("SecretManagerClientMock.ListSecretsPagesWithContextFunc: method is nil but SecretManagerClient.ListSecretsPagesWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		ListSecretsInput *secretsmanager.ListSecretsInput
		Fn               func(*secretsmanager.ListSecretsOutput, bool) bool
		Options          []request.Option
	}{
		ContextMoqParam:  contextMoqParam,
		ListSecretsInput: listSecretsInput,
		Fn:               fn,
		Options:          options,
	}
	mock.lockListSecretsPagesWithContext.Lock()
	mock.calls.ListSecretsPagesWithContext = append(mock.calls.ListSecretsPagesWithContext, callInfo)
	mock.lockListSecretsPagesWithContext.Unlock()
	return mock.ListSecretsPagesWithContextFunc(contextMoqParam, listSecretsInput, fn, options...)
}

// ListSecretsPagesWithContextCalls gets all the calls that were made to ListSecretsPagesWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.ListSecretsPagesWithContextCalls())
func (mock *SecretManagerClientMock) ListSecretsPagesWithContextCalls() []struct {
	ContextMoqParam  context.Context
	ListSecretsInput *secretsmanager.ListSecretsInput
	Fn               func(*secretsmanager.ListSecretsOutput, bool) bool
	Options          []request.Option
} {
	var calls []struct {
		ContextMoqParam  context.Context
		ListSecretsInput *secretsmanager.ListSecretsInput
		Fn               func(*secretsmanager.ListSecretsOutput, bool) bool
		Options          []request.Option
	}
	mock.lockListSecretsPagesWithContext.RLock()
	calls = mock.calls.ListSecretsPagesWithContext
	mock.lockListSecretsPagesWithContext.RUnlock()
	return calls
}

// ListSecretsRequest calls ListSecretsRequestFunc.
func (mock *SecretManagerClientMock) ListSecretsRequest(listSecretsInput *secretsmanager.ListSecretsInput) (*request.Request, *secretsmanager.ListSecretsOutput) {
	if mock.ListSecretsRequestFunc == nil {
		panic("SecretManagerClientMock.ListSecretsRequestFunc: method is nil but SecretManagerClient.ListSecretsRequest was just called")
	}
	callInfo := struct {
		ListSecretsInput *secretsmanager.ListSecretsInput
	}{
		ListSecretsInput: listSecretsInput,
	}
	mock.lockListSecretsRequest.Lock()
	mock.calls.ListSecretsRequest = append(mock.calls.ListSecretsRequest, callInfo)
	mock.lockListSecretsRequest.Unlock()
	return mock.ListSecretsRequestFunc(listSecretsInput)
}

// ListSecretsRequestCalls gets all the calls that were made to ListSecretsRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.ListSecretsRequestCalls())
func (mock *SecretManagerClientMock) ListSecretsRequestCalls() []struct {
	ListSecretsInput *secretsmanager.ListSecretsInput
} {
	var calls []struct {
		ListSecretsInput *secretsmanager.ListSecretsInput
	}
	mock.lockListSecretsRequest.RLock()
	calls = mock.calls.ListSecretsRequest
	mock.lockListSecretsRequest.RUnlock()
	return calls
}

// ListSecretsWithContext calls ListSecretsWithContextFunc.
func (mock *SecretManagerClientMock) ListSecretsWithContext(contextMoqParam context.Context, listSecretsInput *secretsmanager.ListSecretsInput, options ...request.Option) (*secretsmanager.ListSecretsOutput, error) {
	if mock.ListSecretsWithContextFunc == nil {
		panic("SecretManagerClientMock.ListSecretsWithContextFunc: method is nil but SecretManagerClient.ListSecretsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		ListSecretsInput *secretsmanager.ListSecretsInput
		Options          []request.Option
	}{
		ContextMoqParam:  contextMoqParam,
		ListSecretsInput: listSecretsInput,
		Options:          options,
	}
	mock.lockListSecretsWithContext.Lock()
	mock.calls.ListSecretsWithContext = append(mock.calls.ListSecretsWithContext, callInfo)
	mock.lockListSecretsWithContext.Unlock()
	return mock.ListSecretsWithContextFunc(contextMoqParam, listSecretsInput, options...)
}

// ListSecretsWithContextCalls gets all the calls that were made to ListSecretsWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.ListSecretsWithContextCalls())
func (mock *SecretManagerClientMock) ListSecretsWithContextCalls() []struct {
	ContextMoqParam  context.Context
	ListSecretsInput *secretsmanager.ListSecretsInput
	Options          []request.Option
} {
	var calls []struct {
		ContextMoqParam  context.Context
		ListSecretsInput *secretsmanager.ListSecretsInput
		Options          []request.Option
	}
	mock.lockListSecretsWithContext.RLock()
	calls = mock.calls.ListSecretsWithContext
	mock.lockListSecretsWithContext.RUnlock()
	return calls
}

// PutResourcePolicy calls PutResourcePolicyFunc.
func (mock *SecretManagerClientMock) PutResourcePolicy(putResourcePolicyInput *secretsmanager.PutResourcePolicyInput) (*secretsmanager.PutResourcePolicyOutput, error) {
	if mock.PutResourcePolicyFunc == nil {
		panic("SecretManagerClientMock.PutResourcePolicyFunc: method is nil but SecretManagerClient.PutResourcePolicy was just called")
	}
	callInfo := struct {
		PutResourcePolicyInput *secretsmanager.PutResourcePolicyInput
	}{
		PutResourcePolicyInput: putResourcePolicyInput,
	}
	mock.lockPutResourcePolicy.Lock()
	mock.calls.PutResourcePolicy = append(mock.calls.PutResourcePolicy, callInfo)
	mock.lockPutResourcePolicy.Unlock()
	return mock.PutResourcePolicyFunc(putResourcePolicyInput)
}

// PutResourcePolicyCalls gets all the calls that were made to PutResourcePolicy.
// Check the length with:
//
//	len(mockedSecretManagerClient.PutResourcePolicyCalls())
func (mock *SecretManagerClientMock) PutResourcePolicyCalls() []struct {
	PutResourcePolicyInput *secretsmanager.PutResourcePolicyInput
} {
	var calls []struct {
		PutResourcePolicyInput *secretsmanager.PutResourcePolicyInput
	}
	mock.lockPutResourcePolicy.RLock()
	calls = mock.calls.PutResourcePolicy
	mock.lockPutResourcePolicy.RUnlock()
	return calls
}

// PutResourcePolicyRequest calls PutResourcePolicyRequestFunc.
func (mock *SecretManagerClientMock) PutResourcePolicyRequest(putResourcePolicyInput *secretsmanager.PutResourcePolicyInput) (*request.Request, *secretsmanager.PutResourcePolicyOutput) {
	if mock.PutResourcePolicyRequestFunc == nil {
		panic("SecretManagerClientMock.PutResourcePolicyRequestFunc: method is nil but SecretManagerClient.PutResourcePolicyRequest was just called")
	}
	callInfo := struct {
		PutResourcePolicyInput *secretsmanager.PutResourcePolicyInput
	}{
		PutResourcePolicyInput: putResourcePolicyInput,
	}
	mock.lockPutResourcePolicyRequest.Lock()
	mock.calls.PutResourcePolicyRequest = append(mock.calls.PutResourcePolicyRequest, callInfo)
	mock.lockPutResourcePolicyRequest.Unlock()
	return mock.PutResourcePolicyRequestFunc(putResourcePolicyInput)
}

// PutResourcePolicyRequestCalls gets all the calls that were made to PutResourcePolicyRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.PutResourcePolicyRequestCalls())
func (mock *SecretManagerClientMock) PutResourcePolicyRequestCalls() []struct {
	PutResourcePolicyInput *secretsmanager.PutResourcePolicyInput
} {
	var calls []struct {
		PutResourcePolicyInput *secretsmanager.PutResourcePolicyInput
	}
	mock.lockPutResourcePolicyRequest.RLock()
	calls = mock.calls.PutResourcePolicyRequest
	mock.lockPutResourcePolicyRequest.RUnlock()
	return calls
}

// PutResourcePolicyWithContext calls PutResourcePolicyWithContextFunc.
func (mock *SecretManagerClientMock) PutResourcePolicyWithContext(contextMoqParam context.Context, putResourcePolicyInput *secretsmanager.PutResourcePolicyInput, options ...request.Option) (*secretsmanager.PutResourcePolicyOutput, error) {
	if mock.PutResourcePolicyWithContextFunc == nil {
		panic("SecretManagerClientMock.PutResourcePolicyWithContextFunc: method is nil but SecretManagerClient.PutResourcePolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam        context.Context
		PutResourcePolicyInput *secretsmanager.PutResourcePolicyInput
		Options                []request.Option
	}{
		ContextMoqParam:        contextMoqParam,
		PutResourcePolicyInput: putResourcePolicyInput,
		Options:                options,
	}
	mock.lockPutResourcePolicyWithContext.Lock()
	mock.calls.PutResourcePolicyWithContext = append(mock.calls.PutResourcePolicyWithContext, callInfo)
	mock.lockPutResourcePolicyWithContext.Unlock()
	return mock.PutResourcePolicyWithContextFunc(contextMoqParam, putResourcePolicyInput, options...)
}

// PutResourcePolicyWithContextCalls gets all the calls that were made to PutResourcePolicyWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.PutResourcePolicyWithContextCalls())
func (mock *SecretManagerClientMock) PutResourcePolicyWithContextCalls() []struct {
	ContextMoqParam        context.Context
	PutResourcePolicyInput *secretsmanager.PutResourcePolicyInput
	Options                []request.Option
} {
	var calls []struct {
		ContextMoqParam        context.Context
		PutResourcePolicyInput *secretsmanager.PutResourcePolicyInput
		Options                []request.Option
	}
	mock.lockPutResourcePolicyWithContext.RLock()
	calls = mock.calls.PutResourcePolicyWithContext
	mock.lockPutResourcePolicyWithContext.RUnlock()
	return calls
}

// PutSecretValue calls PutSecretValueFunc.
func (mock *SecretManagerClientMock) PutSecretValue(putSecretValueInput *secretsmanager.PutSecretValueInput) (*secretsmanager.PutSecretValueOutput, error) {
	if mock.PutSecretValueFunc == nil {
		panic("SecretManagerClientMock.PutSecretValueFunc: method is nil but SecretManagerClient.PutSecretValue was just called")
	}
	callInfo := struct {
		PutSecretValueInput *secretsmanager.PutSecretValueInput
	}{
		PutSecretValueInput: putSecretValueInput,
	}
	mock.lockPutSecretValue.Lock()
	mock.calls.PutSecretValue = append(mock.calls.PutSecretValue, callInfo)
	mock.lockPutSecretValue.Unlock()
	return mock.PutSecretValueFunc(putSecretValueInput)
}

// PutSecretValueCalls gets all the calls that were made to PutSecretValue.
// Check the length with:
//
//	len(mockedSecretManagerClient.PutSecretValueCalls())
func (mock *SecretManagerClientMock) PutSecretValueCalls() []struct {
	PutSecretValueInput *secretsmanager.PutSecretValueInput
} {
	var calls []struct {
		PutSecretValueInput *secretsmanager.PutSecretValueInput
	}
	mock.lockPutSecretValue.RLock()
	calls = mock.calls.PutSecretValue
	mock.lockPutSecretValue.RUnlock()
	return calls
}

// PutSecretValueRequest calls PutSecretValueRequestFunc.
func (mock *SecretManagerClientMock) PutSecretValueRequest(putSecretValueInput *secretsmanager.PutSecretValueInput) (*request.Request, *secretsmanager.PutSecretValueOutput) {
	if mock.PutSecretValueRequestFunc == nil {
		panic("SecretManagerClientMock.PutSecretValueRequestFunc: method is nil but SecretManagerClient.PutSecretValueRequest was just called")
	}
	callInfo := struct {
		PutSecretValueInput *secretsmanager.PutSecretValueInput
	}{
		PutSecretValueInput: putSecretValueInput,
	}
	mock.lockPutSecretValueRequest.Lock()
	mock.calls.PutSecretValueRequest = append(mock.calls.PutSecretValueRequest, callInfo)
	mock.lockPutSecretValueRequest.Unlock()
	return mock.PutSecretValueRequestFunc(putSecretValueInput)
}

// PutSecretValueRequestCalls gets all the calls that were made to PutSecretValueRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.PutSecretValueRequestCalls())
func (mock *SecretManagerClientMock) PutSecretValueRequestCalls() []struct {
	PutSecretValueInput *secretsmanager.PutSecretValueInput
} {
	var calls []struct {
		PutSecretValueInput *secretsmanager.PutSecretValueInput
	}
	mock.lockPutSecretValueRequest.RLock()
	calls = mock.calls.PutSecretValueRequest
	mock.lockPutSecretValueRequest.RUnlock()
	return calls
}

// PutSecretValueWithContext calls PutSecretValueWithContextFunc.
func (mock *SecretManagerClientMock) PutSecretValueWithContext(contextMoqParam context.Context, putSecretValueInput *secretsmanager.PutSecretValueInput, options ...request.Option) (*secretsmanager.PutSecretValueOutput, error) {
	if mock.PutSecretValueWithContextFunc == nil {
		panic("SecretManagerClientMock.PutSecretValueWithContextFunc: method is nil but SecretManagerClient.PutSecretValueWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam     context.Context
		PutSecretValueInput *secretsmanager.PutSecretValueInput
		Options             []request.Option
	}{
		ContextMoqParam:     contextMoqParam,
		PutSecretValueInput: putSecretValueInput,
		Options:             options,
	}
	mock.lockPutSecretValueWithContext.Lock()
	mock.calls.PutSecretValueWithContext = append(mock.calls.PutSecretValueWithContext, callInfo)
	mock.lockPutSecretValueWithContext.Unlock()
	return mock.PutSecretValueWithContextFunc(contextMoqParam, putSecretValueInput, options...)
}

// PutSecretValueWithContextCalls gets all the calls that were made to PutSecretValueWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.PutSecretValueWithContextCalls())
func (mock *SecretManagerClientMock) PutSecretValueWithContextCalls() []struct {
	ContextMoqParam     context.Context
	PutSecretValueInput *secretsmanager.PutSecretValueInput
	Options             []request.Option
} {
	var calls []struct {
		ContextMoqParam     context.Context
		PutSecretValueInput *secretsmanager.PutSecretValueInput
		Options             []request.Option
	}
	mock.lockPutSecretValueWithContext.RLock()
	calls = mock.calls.PutSecretValueWithContext
	mock.lockPutSecretValueWithContext.RUnlock()
	return calls
}

// RemoveRegionsFromReplication calls RemoveRegionsFromReplicationFunc.
func (mock *SecretManagerClientMock) RemoveRegionsFromReplication(removeRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput) (*secretsmanager.RemoveRegionsFromReplicationOutput, error) {
	if mock.RemoveRegionsFromReplicationFunc == nil {
		panic("SecretManagerClientMock.RemoveRegionsFromReplicationFunc: method is nil but SecretManagerClient.RemoveRegionsFromReplication was just called")
	}
	callInfo := struct {
		RemoveRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput
	}{
		RemoveRegionsFromReplicationInput: removeRegionsFromReplicationInput,
	}
	mock.lockRemoveRegionsFromReplication.Lock()
	mock.calls.RemoveRegionsFromReplication = append(mock.calls.RemoveRegionsFromReplication, callInfo)
	mock.lockRemoveRegionsFromReplication.Unlock()
	return mock.RemoveRegionsFromReplicationFunc(removeRegionsFromReplicationInput)
}

// RemoveRegionsFromReplicationCalls gets all the calls that were made to RemoveRegionsFromReplication.
// Check the length with:
//
//	len(mockedSecretManagerClient.RemoveRegionsFromReplicationCalls())
func (mock *SecretManagerClientMock) RemoveRegionsFromReplicationCalls() []struct {
	RemoveRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput
} {
	var calls []struct {
		RemoveRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput
	}
	mock.lockRemoveRegionsFromReplication.RLock()
	calls = mock.calls.RemoveRegionsFromReplication
	mock.lockRemoveRegionsFromReplication.RUnlock()
	return calls
}

// RemoveRegionsFromReplicationRequest calls RemoveRegionsFromReplicationRequestFunc.
func (mock *SecretManagerClientMock) RemoveRegionsFromReplicationRequest(removeRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput) (*request.Request, *secretsmanager.RemoveRegionsFromReplicationOutput) {
	if mock.RemoveRegionsFromReplicationRequestFunc == nil {
		panic("SecretManagerClientMock.RemoveRegionsFromReplicationRequestFunc: method is nil but SecretManagerClient.RemoveRegionsFromReplicationRequest was just called")
	}
	callInfo := struct {
		RemoveRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput
	}{
		RemoveRegionsFromReplicationInput: removeRegionsFromReplicationInput,
	}
	mock.lockRemoveRegionsFromReplicationRequest.Lock()
	mock.calls.RemoveRegionsFromReplicationRequest = append(mock.calls.RemoveRegionsFromReplicationRequest, callInfo)
	mock.lockRemoveRegionsFromReplicationRequest.Unlock()
	return mock.RemoveRegionsFromReplicationRequestFunc(removeRegionsFromReplicationInput)
}

// RemoveRegionsFromReplicationRequestCalls gets all the calls that were made to RemoveRegionsFromReplicationRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.RemoveRegionsFromReplicationRequestCalls())
func (mock *SecretManagerClientMock) RemoveRegionsFromReplicationRequestCalls() []struct {
	RemoveRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput
} {
	var calls []struct {
		RemoveRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput
	}
	mock.lockRemoveRegionsFromReplicationRequest.RLock()
	calls = mock.calls.RemoveRegionsFromReplicationRequest
	mock.lockRemoveRegionsFromReplicationRequest.RUnlock()
	return calls
}

// RemoveRegionsFromReplicationWithContext calls RemoveRegionsFromReplicationWithContextFunc.
func (mock *SecretManagerClientMock) RemoveRegionsFromReplicationWithContext(contextMoqParam context.Context, removeRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput, options ...request.Option) (*secretsmanager.RemoveRegionsFromReplicationOutput, error) {
	if mock.RemoveRegionsFromReplicationWithContextFunc == nil {
		panic("SecretManagerClientMock.RemoveRegionsFromReplicationWithContextFunc: method is nil but SecretManagerClient.RemoveRegionsFromReplicationWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam                   context.Context
		RemoveRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput
		Options                           []request.Option
	}{
		ContextMoqParam:                   contextMoqParam,
		RemoveRegionsFromReplicationInput: removeRegionsFromReplicationInput,
		Options:                           options,
	}
	mock.lockRemoveRegionsFromReplicationWithContext.Lock()
	mock.calls.RemoveRegionsFromReplicationWithContext = append(mock.calls.RemoveRegionsFromReplicationWithContext, callInfo)
	mock.lockRemoveRegionsFromReplicationWithContext.Unlock()
	return mock.RemoveRegionsFromReplicationWithContextFunc(contextMoqParam, removeRegionsFromReplicationInput, options...)
}

// RemoveRegionsFromReplicationWithContextCalls gets all the calls that were made to RemoveRegionsFromReplicationWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.RemoveRegionsFromReplicationWithContextCalls())
func (mock *SecretManagerClientMock) RemoveRegionsFromReplicationWithContextCalls() []struct {
	ContextMoqParam                   context.Context
	RemoveRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput
	Options                           []request.Option
} {
	var calls []struct {
		ContextMoqParam                   context.Context
		RemoveRegionsFromReplicationInput *secretsmanager.RemoveRegionsFromReplicationInput
		Options                           []request.Option
	}
	mock.lockRemoveRegionsFromReplicationWithContext.RLock()
	calls = mock.calls.RemoveRegionsFromReplicationWithContext
	mock.lockRemoveRegionsFromReplicationWithContext.RUnlock()
	return calls
}

// ReplicateSecretToRegions calls ReplicateSecretToRegionsFunc.
func (mock *SecretManagerClientMock) ReplicateSecretToRegions(replicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput) (*secretsmanager.ReplicateSecretToRegionsOutput, error) {
	if mock.ReplicateSecretToRegionsFunc == nil {
		panic("SecretManagerClientMock.ReplicateSecretToRegionsFunc: method is nil but SecretManagerClient.ReplicateSecretToRegions was just called")
	}
	callInfo := struct {
		ReplicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput
	}{
		ReplicateSecretToRegionsInput: replicateSecretToRegionsInput,
	}
	mock.lockReplicateSecretToRegions.Lock()
	mock.calls.ReplicateSecretToRegions = append(mock.calls.ReplicateSecretToRegions, callInfo)
	mock.lockReplicateSecretToRegions.Unlock()
	return mock.ReplicateSecretToRegionsFunc(replicateSecretToRegionsInput)
}

// ReplicateSecretToRegionsCalls gets all the calls that were made to ReplicateSecretToRegions.
// Check the length with:
//
//	len(mockedSecretManagerClient.ReplicateSecretToRegionsCalls())
func (mock *SecretManagerClientMock) ReplicateSecretToRegionsCalls() []struct {
	ReplicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput
} {
	var calls []struct {
		ReplicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput
	}
	mock.lockReplicateSecretToRegions.RLock()
	calls = mock.calls.ReplicateSecretToRegions
	mock.lockReplicateSecretToRegions.RUnlock()
	return calls
}

// ReplicateSecretToRegionsRequest calls ReplicateSecretToRegionsRequestFunc.
func (mock *SecretManagerClientMock) ReplicateSecretToRegionsRequest(replicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput) (*request.Request, *secretsmanager.ReplicateSecretToRegionsOutput) {
	if mock.ReplicateSecretToRegionsRequestFunc == nil {
		panic("SecretManagerClientMock.ReplicateSecretToRegionsRequestFunc: method is nil but SecretManagerClient.ReplicateSecretToRegionsRequest was just called")
	}
	callInfo := struct {
		ReplicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput
	}{
		ReplicateSecretToRegionsInput: replicateSecretToRegionsInput,
	}
	mock.lockReplicateSecretToRegionsRequest.Lock()
	mock.calls.ReplicateSecretToRegionsRequest = append(mock.calls.ReplicateSecretToRegionsRequest, callInfo)
	mock.lockReplicateSecretToRegionsRequest.Unlock()
	return mock.ReplicateSecretToRegionsRequestFunc(replicateSecretToRegionsInput)
}

// ReplicateSecretToRegionsRequestCalls gets all the calls that were made to ReplicateSecretToRegionsRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.ReplicateSecretToRegionsRequestCalls())
func (mock *SecretManagerClientMock) ReplicateSecretToRegionsRequestCalls() []struct {
	ReplicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput
} {
	var calls []struct {
		ReplicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput
	}
	mock.lockReplicateSecretToRegionsRequest.RLock()
	calls = mock.calls.ReplicateSecretToRegionsRequest
	mock.lockReplicateSecretToRegionsRequest.RUnlock()
	return calls
}

// ReplicateSecretToRegionsWithContext calls ReplicateSecretToRegionsWithContextFunc.
func (mock *SecretManagerClientMock) ReplicateSecretToRegionsWithContext(contextMoqParam context.Context, replicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput, options ...request.Option) (*secretsmanager.ReplicateSecretToRegionsOutput, error) {
	if mock.ReplicateSecretToRegionsWithContextFunc == nil {
		panic("SecretManagerClientMock.ReplicateSecretToRegionsWithContextFunc: method is nil but SecretManagerClient.ReplicateSecretToRegionsWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		ReplicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		ReplicateSecretToRegionsInput: replicateSecretToRegionsInput,
		Options:                       options,
	}
	mock.lockReplicateSecretToRegionsWithContext.Lock()
	mock.calls.ReplicateSecretToRegionsWithContext = append(mock.calls.ReplicateSecretToRegionsWithContext, callInfo)
	mock.lockReplicateSecretToRegionsWithContext.Unlock()
	return mock.ReplicateSecretToRegionsWithContextFunc(contextMoqParam, replicateSecretToRegionsInput, options...)
}

// ReplicateSecretToRegionsWithContextCalls gets all the calls that were made to ReplicateSecretToRegionsWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.ReplicateSecretToRegionsWithContextCalls())
func (mock *SecretManagerClientMock) ReplicateSecretToRegionsWithContextCalls() []struct {
	ContextMoqParam               context.Context
	ReplicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		ReplicateSecretToRegionsInput *secretsmanager.ReplicateSecretToRegionsInput
		Options                       []request.Option
	}
	mock.lockReplicateSecretToRegionsWithContext.RLock()
	calls = mock.calls.ReplicateSecretToRegionsWithContext
	mock.lockReplicateSecretToRegionsWithContext.RUnlock()
	return calls
}

// RestoreSecret calls RestoreSecretFunc.
func (mock *SecretManagerClientMock) RestoreSecret(restoreSecretInput *secretsmanager.RestoreSecretInput) (*secretsmanager.RestoreSecretOutput, error) {
	if mock.RestoreSecretFunc == nil {
		panic("SecretManagerClientMock.RestoreSecretFunc: method is nil but SecretManagerClient.RestoreSecret was just called")
	}
	callInfo := struct {
		RestoreSecretInput *secretsmanager.RestoreSecretInput
	}{
		RestoreSecretInput: restoreSecretInput,
	}
	mock.lockRestoreSecret.Lock()
	mock.calls.RestoreSecret = append(mock.calls.RestoreSecret, callInfo)
	mock.lockRestoreSecret.Unlock()
	return mock.RestoreSecretFunc(restoreSecretInput)
}

// RestoreSecretCalls gets all the calls that were made to RestoreSecret.
// Check the length with:
//
//	len(mockedSecretManagerClient.RestoreSecretCalls())
func (mock *SecretManagerClientMock) RestoreSecretCalls() []struct {
	RestoreSecretInput *secretsmanager.RestoreSecretInput
} {
	var calls []struct {
		RestoreSecretInput *secretsmanager.RestoreSecretInput
	}
	mock.lockRestoreSecret.RLock()
	calls = mock.calls.RestoreSecret
	mock.lockRestoreSecret.RUnlock()
	return calls
}

// RestoreSecretRequest calls RestoreSecretRequestFunc.
func (mock *SecretManagerClientMock) RestoreSecretRequest(restoreSecretInput *secretsmanager.RestoreSecretInput) (*request.Request, *secretsmanager.RestoreSecretOutput) {
	if mock.RestoreSecretRequestFunc == nil {
		panic("SecretManagerClientMock.RestoreSecretRequestFunc: method is nil but SecretManagerClient.RestoreSecretRequest was just called")
	}
	callInfo := struct {
		RestoreSecretInput *secretsmanager.RestoreSecretInput
	}{
		RestoreSecretInput: restoreSecretInput,
	}
	mock.lockRestoreSecretRequest.Lock()
	mock.calls.RestoreSecretRequest = append(mock.calls.RestoreSecretRequest, callInfo)
	mock.lockRestoreSecretRequest.Unlock()
	return mock.RestoreSecretRequestFunc(restoreSecretInput)
}

// RestoreSecretRequestCalls gets all the calls that were made to RestoreSecretRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.RestoreSecretRequestCalls())
func (mock *SecretManagerClientMock) RestoreSecretRequestCalls() []struct {
	RestoreSecretInput *secretsmanager.RestoreSecretInput
} {
	var calls []struct {
		RestoreSecretInput *secretsmanager.RestoreSecretInput
	}
	mock.lockRestoreSecretRequest.RLock()
	calls = mock.calls.RestoreSecretRequest
	mock.lockRestoreSecretRequest.RUnlock()
	return calls
}

// RestoreSecretWithContext calls RestoreSecretWithContextFunc.
func (mock *SecretManagerClientMock) RestoreSecretWithContext(contextMoqParam context.Context, restoreSecretInput *secretsmanager.RestoreSecretInput, options ...request.Option) (*secretsmanager.RestoreSecretOutput, error) {
	if mock.RestoreSecretWithContextFunc == nil {
		panic("SecretManagerClientMock.RestoreSecretWithContextFunc: method is nil but SecretManagerClient.RestoreSecretWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		RestoreSecretInput *secretsmanager.RestoreSecretInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		RestoreSecretInput: restoreSecretInput,
		Options:            options,
	}
	mock.lockRestoreSecretWithContext.Lock()
	mock.calls.RestoreSecretWithContext = append(mock.calls.RestoreSecretWithContext, callInfo)
	mock.lockRestoreSecretWithContext.Unlock()
	return mock.RestoreSecretWithContextFunc(contextMoqParam, restoreSecretInput, options...)
}

// RestoreSecretWithContextCalls gets all the calls that were made to RestoreSecretWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.RestoreSecretWithContextCalls())
func (mock *SecretManagerClientMock) RestoreSecretWithContextCalls() []struct {
	ContextMoqParam    context.Context
	RestoreSecretInput *secretsmanager.RestoreSecretInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		RestoreSecretInput *secretsmanager.RestoreSecretInput
		Options            []request.Option
	}
	mock.lockRestoreSecretWithContext.RLock()
	calls = mock.calls.RestoreSecretWithContext
	mock.lockRestoreSecretWithContext.RUnlock()
	return calls
}

// RotateSecret calls RotateSecretFunc.
func (mock *SecretManagerClientMock) RotateSecret(rotateSecretInput *secretsmanager.RotateSecretInput) (*secretsmanager.RotateSecretOutput, error) {
	if mock.RotateSecretFunc == nil {
		panic("SecretManagerClientMock.RotateSecretFunc: method is nil but SecretManagerClient.RotateSecret was just called")
	}
	callInfo := struct {
		RotateSecretInput *secretsmanager.RotateSecretInput
	}{
		RotateSecretInput: rotateSecretInput,
	}
	mock.lockRotateSecret.Lock()
	mock.calls.RotateSecret = append(mock.calls.RotateSecret, callInfo)
	mock.lockRotateSecret.Unlock()
	return mock.RotateSecretFunc(rotateSecretInput)
}

// RotateSecretCalls gets all the calls that were made to RotateSecret.
// Check the length with:
//
//	len(mockedSecretManagerClient.RotateSecretCalls())
func (mock *SecretManagerClientMock) RotateSecretCalls() []struct {
	RotateSecretInput *secretsmanager.RotateSecretInput
} {
	var calls []struct {
		RotateSecretInput *secretsmanager.RotateSecretInput
	}
	mock.lockRotateSecret.RLock()
	calls = mock.calls.RotateSecret
	mock.lockRotateSecret.RUnlock()
	return calls
}

// RotateSecretRequest calls RotateSecretRequestFunc.
func (mock *SecretManagerClientMock) RotateSecretRequest(rotateSecretInput *secretsmanager.RotateSecretInput) (*request.Request, *secretsmanager.RotateSecretOutput) {
	if mock.RotateSecretRequestFunc == nil {
		panic("SecretManagerClientMock.RotateSecretRequestFunc: method is nil but SecretManagerClient.RotateSecretRequest was just called")
	}
	callInfo := struct {
		RotateSecretInput *secretsmanager.RotateSecretInput
	}{
		RotateSecretInput: rotateSecretInput,
	}
	mock.lockRotateSecretRequest.Lock()
	mock.calls.RotateSecretRequest = append(mock.calls.RotateSecretRequest, callInfo)
	mock.lockRotateSecretRequest.Unlock()
	return mock.RotateSecretRequestFunc(rotateSecretInput)
}

// RotateSecretRequestCalls gets all the calls that were made to RotateSecretRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.RotateSecretRequestCalls())
func (mock *SecretManagerClientMock) RotateSecretRequestCalls() []struct {
	RotateSecretInput *secretsmanager.RotateSecretInput
} {
	var calls []struct {
		RotateSecretInput *secretsmanager.RotateSecretInput
	}
	mock.lockRotateSecretRequest.RLock()
	calls = mock.calls.RotateSecretRequest
	mock.lockRotateSecretRequest.RUnlock()
	return calls
}

// RotateSecretWithContext calls RotateSecretWithContextFunc.
func (mock *SecretManagerClientMock) RotateSecretWithContext(contextMoqParam context.Context, rotateSecretInput *secretsmanager.RotateSecretInput, options ...request.Option) (*secretsmanager.RotateSecretOutput, error) {
	if mock.RotateSecretWithContextFunc == nil {
		panic("SecretManagerClientMock.RotateSecretWithContextFunc: method is nil but SecretManagerClient.RotateSecretWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		RotateSecretInput *secretsmanager.RotateSecretInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		RotateSecretInput: rotateSecretInput,
		Options:           options,
	}
	mock.lockRotateSecretWithContext.Lock()
	mock.calls.RotateSecretWithContext = append(mock.calls.RotateSecretWithContext, callInfo)
	mock.lockRotateSecretWithContext.Unlock()
	return mock.RotateSecretWithContextFunc(contextMoqParam, rotateSecretInput, options...)
}

// RotateSecretWithContextCalls gets all the calls that were made to RotateSecretWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.RotateSecretWithContextCalls())
func (mock *SecretManagerClientMock) RotateSecretWithContextCalls() []struct {
	ContextMoqParam   context.Context
	RotateSecretInput *secretsmanager.RotateSecretInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		RotateSecretInput *secretsmanager.RotateSecretInput
		Options           []request.Option
	}
	mock.lockRotateSecretWithContext.RLock()
	calls = mock.calls.RotateSecretWithContext
	mock.lockRotateSecretWithContext.RUnlock()
	return calls
}

// StopReplicationToReplica calls StopReplicationToReplicaFunc.
func (mock *SecretManagerClientMock) StopReplicationToReplica(stopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput) (*secretsmanager.StopReplicationToReplicaOutput, error) {
	if mock.StopReplicationToReplicaFunc == nil {
		panic("SecretManagerClientMock.StopReplicationToReplicaFunc: method is nil but SecretManagerClient.StopReplicationToReplica was just called")
	}
	callInfo := struct {
		StopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput
	}{
		StopReplicationToReplicaInput: stopReplicationToReplicaInput,
	}
	mock.lockStopReplicationToReplica.Lock()
	mock.calls.StopReplicationToReplica = append(mock.calls.StopReplicationToReplica, callInfo)
	mock.lockStopReplicationToReplica.Unlock()
	return mock.StopReplicationToReplicaFunc(stopReplicationToReplicaInput)
}

// StopReplicationToReplicaCalls gets all the calls that were made to StopReplicationToReplica.
// Check the length with:
//
//	len(mockedSecretManagerClient.StopReplicationToReplicaCalls())
func (mock *SecretManagerClientMock) StopReplicationToReplicaCalls() []struct {
	StopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput
} {
	var calls []struct {
		StopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput
	}
	mock.lockStopReplicationToReplica.RLock()
	calls = mock.calls.StopReplicationToReplica
	mock.lockStopReplicationToReplica.RUnlock()
	return calls
}

// StopReplicationToReplicaRequest calls StopReplicationToReplicaRequestFunc.
func (mock *SecretManagerClientMock) StopReplicationToReplicaRequest(stopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput) (*request.Request, *secretsmanager.StopReplicationToReplicaOutput) {
	if mock.StopReplicationToReplicaRequestFunc == nil {
		panic("SecretManagerClientMock.StopReplicationToReplicaRequestFunc: method is nil but SecretManagerClient.StopReplicationToReplicaRequest was just called")
	}
	callInfo := struct {
		StopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput
	}{
		StopReplicationToReplicaInput: stopReplicationToReplicaInput,
	}
	mock.lockStopReplicationToReplicaRequest.Lock()
	mock.calls.StopReplicationToReplicaRequest = append(mock.calls.StopReplicationToReplicaRequest, callInfo)
	mock.lockStopReplicationToReplicaRequest.Unlock()
	return mock.StopReplicationToReplicaRequestFunc(stopReplicationToReplicaInput)
}

// StopReplicationToReplicaRequestCalls gets all the calls that were made to StopReplicationToReplicaRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.StopReplicationToReplicaRequestCalls())
func (mock *SecretManagerClientMock) StopReplicationToReplicaRequestCalls() []struct {
	StopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput
} {
	var calls []struct {
		StopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput
	}
	mock.lockStopReplicationToReplicaRequest.RLock()
	calls = mock.calls.StopReplicationToReplicaRequest
	mock.lockStopReplicationToReplicaRequest.RUnlock()
	return calls
}

// StopReplicationToReplicaWithContext calls StopReplicationToReplicaWithContextFunc.
func (mock *SecretManagerClientMock) StopReplicationToReplicaWithContext(contextMoqParam context.Context, stopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput, options ...request.Option) (*secretsmanager.StopReplicationToReplicaOutput, error) {
	if mock.StopReplicationToReplicaWithContextFunc == nil {
		panic("SecretManagerClientMock.StopReplicationToReplicaWithContextFunc: method is nil but SecretManagerClient.StopReplicationToReplicaWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		StopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		StopReplicationToReplicaInput: stopReplicationToReplicaInput,
		Options:                       options,
	}
	mock.lockStopReplicationToReplicaWithContext.Lock()
	mock.calls.StopReplicationToReplicaWithContext = append(mock.calls.StopReplicationToReplicaWithContext, callInfo)
	mock.lockStopReplicationToReplicaWithContext.Unlock()
	return mock.StopReplicationToReplicaWithContextFunc(contextMoqParam, stopReplicationToReplicaInput, options...)
}

// StopReplicationToReplicaWithContextCalls gets all the calls that were made to StopReplicationToReplicaWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.StopReplicationToReplicaWithContextCalls())
func (mock *SecretManagerClientMock) StopReplicationToReplicaWithContextCalls() []struct {
	ContextMoqParam               context.Context
	StopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		StopReplicationToReplicaInput *secretsmanager.StopReplicationToReplicaInput
		Options                       []request.Option
	}
	mock.lockStopReplicationToReplicaWithContext.RLock()
	calls = mock.calls.StopReplicationToReplicaWithContext
	mock.lockStopReplicationToReplicaWithContext.RUnlock()
	return calls
}

// TagResource calls TagResourceFunc.
func (mock *SecretManagerClientMock) TagResource(tagResourceInput *secretsmanager.TagResourceInput) (*secretsmanager.TagResourceOutput, error) {
	if mock.TagResourceFunc == nil {
		panic("SecretManagerClientMock.TagResourceFunc: method is nil but SecretManagerClient.TagResource was just called")
	}
	callInfo := struct {
		TagResourceInput *secretsmanager.TagResourceInput
	}{
		TagResourceInput: tagResourceInput,
	}
	mock.lockTagResource.Lock()
	mock.calls.TagResource = append(mock.calls.TagResource, callInfo)
	mock.lockTagResource.Unlock()
	return mock.TagResourceFunc(tagResourceInput)
}

// TagResourceCalls gets all the calls that were made to TagResource.
// Check the length with:
//
//	len(mockedSecretManagerClient.TagResourceCalls())
func (mock *SecretManagerClientMock) TagResourceCalls() []struct {
	TagResourceInput *secretsmanager.TagResourceInput
} {
	var calls []struct {
		TagResourceInput *secretsmanager.TagResourceInput
	}
	mock.lockTagResource.RLock()
	calls = mock.calls.TagResource
	mock.lockTagResource.RUnlock()
	return calls
}

// TagResourceRequest calls TagResourceRequestFunc.
func (mock *SecretManagerClientMock) TagResourceRequest(tagResourceInput *secretsmanager.TagResourceInput) (*request.Request, *secretsmanager.TagResourceOutput) {
	if mock.TagResourceRequestFunc == nil {
		panic("SecretManagerClientMock.TagResourceRequestFunc: method is nil but SecretManagerClient.TagResourceRequest was just called")
	}
	callInfo := struct {
		TagResourceInput *secretsmanager.TagResourceInput
	}{
		TagResourceInput: tagResourceInput,
	}
	mock.lockTagResourceRequest.Lock()
	mock.calls.TagResourceRequest = append(mock.calls.TagResourceRequest, callInfo)
	mock.lockTagResourceRequest.Unlock()
	return mock.TagResourceRequestFunc(tagResourceInput)
}

// TagResourceRequestCalls gets all the calls that were made to TagResourceRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.TagResourceRequestCalls())
func (mock *SecretManagerClientMock) TagResourceRequestCalls() []struct {
	TagResourceInput *secretsmanager.TagResourceInput
} {
	var calls []struct {
		TagResourceInput *secretsmanager.TagResourceInput
	}
	mock.lockTagResourceRequest.RLock()
	calls = mock.calls.TagResourceRequest
	mock.lockTagResourceRequest.RUnlock()
	return calls
}

// TagResourceWithContext calls TagResourceWithContextFunc.
func (mock *SecretManagerClientMock) TagResourceWithContext(contextMoqParam context.Context, tagResourceInput *secretsmanager.TagResourceInput, options ...request.Option) (*secretsmanager.TagResourceOutput, error) {
	if mock.TagResourceWithContextFunc == nil {
		panic("SecretManagerClientMock.TagResourceWithContextFunc: method is nil but SecretManagerClient.TagResourceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam  context.Context
		TagResourceInput *secretsmanager.TagResourceInput
		Options          []request.Option
	}{
		ContextMoqParam:  contextMoqParam,
		TagResourceInput: tagResourceInput,
		Options:          options,
	}
	mock.lockTagResourceWithContext.Lock()
	mock.calls.TagResourceWithContext = append(mock.calls.TagResourceWithContext, callInfo)
	mock.lockTagResourceWithContext.Unlock()
	return mock.TagResourceWithContextFunc(contextMoqParam, tagResourceInput, options...)
}

// TagResourceWithContextCalls gets all the calls that were made to TagResourceWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.TagResourceWithContextCalls())
func (mock *SecretManagerClientMock) TagResourceWithContextCalls() []struct {
	ContextMoqParam  context.Context
	TagResourceInput *secretsmanager.TagResourceInput
	Options          []request.Option
} {
	var calls []struct {
		ContextMoqParam  context.Context
		TagResourceInput *secretsmanager.TagResourceInput
		Options          []request.Option
	}
	mock.lockTagResourceWithContext.RLock()
	calls = mock.calls.TagResourceWithContext
	mock.lockTagResourceWithContext.RUnlock()
	return calls
}

// UntagResource calls UntagResourceFunc.
func (mock *SecretManagerClientMock) UntagResource(untagResourceInput *secretsmanager.UntagResourceInput) (*secretsmanager.UntagResourceOutput, error) {
	if mock.UntagResourceFunc == nil {
		panic("SecretManagerClientMock.UntagResourceFunc: method is nil but SecretManagerClient.UntagResource was just called")
	}
	callInfo := struct {
		UntagResourceInput *secretsmanager.UntagResourceInput
	}{
		UntagResourceInput: untagResourceInput,
	}
	mock.lockUntagResource.Lock()
	mock.calls.UntagResource = append(mock.calls.UntagResource, callInfo)
	mock.lockUntagResource.Unlock()
	return mock.UntagResourceFunc(untagResourceInput)
}

// UntagResourceCalls gets all the calls that were made to UntagResource.
// Check the length with:
//
//	len(mockedSecretManagerClient.UntagResourceCalls())
func (mock *SecretManagerClientMock) UntagResourceCalls() []struct {
	UntagResourceInput *secretsmanager.UntagResourceInput
} {
	var calls []struct {
		UntagResourceInput *secretsmanager.UntagResourceInput
	}
	mock.lockUntagResource.RLock()
	calls = mock.calls.UntagResource
	mock.lockUntagResource.RUnlock()
	return calls
}

// UntagResourceRequest calls UntagResourceRequestFunc.
func (mock *SecretManagerClientMock) UntagResourceRequest(untagResourceInput *secretsmanager.UntagResourceInput) (*request.Request, *secretsmanager.UntagResourceOutput) {
	if mock.UntagResourceRequestFunc == nil {
		panic("SecretManagerClientMock.UntagResourceRequestFunc: method is nil but SecretManagerClient.UntagResourceRequest was just called")
	}
	callInfo := struct {
		UntagResourceInput *secretsmanager.UntagResourceInput
	}{
		UntagResourceInput: untagResourceInput,
	}
	mock.lockUntagResourceRequest.Lock()
	mock.calls.UntagResourceRequest = append(mock.calls.UntagResourceRequest, callInfo)
	mock.lockUntagResourceRequest.Unlock()
	return mock.UntagResourceRequestFunc(untagResourceInput)
}

// UntagResourceRequestCalls gets all the calls that were made to UntagResourceRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.UntagResourceRequestCalls())
func (mock *SecretManagerClientMock) UntagResourceRequestCalls() []struct {
	UntagResourceInput *secretsmanager.UntagResourceInput
} {
	var calls []struct {
		UntagResourceInput *secretsmanager.UntagResourceInput
	}
	mock.lockUntagResourceRequest.RLock()
	calls = mock.calls.UntagResourceRequest
	mock.lockUntagResourceRequest.RUnlock()
	return calls
}

// UntagResourceWithContext calls UntagResourceWithContextFunc.
func (mock *SecretManagerClientMock) UntagResourceWithContext(contextMoqParam context.Context, untagResourceInput *secretsmanager.UntagResourceInput, options ...request.Option) (*secretsmanager.UntagResourceOutput, error) {
	if mock.UntagResourceWithContextFunc == nil {
		panic("SecretManagerClientMock.UntagResourceWithContextFunc: method is nil but SecretManagerClient.UntagResourceWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		UntagResourceInput *secretsmanager.UntagResourceInput
		Options            []request.Option
	}{
		ContextMoqParam:    contextMoqParam,
		UntagResourceInput: untagResourceInput,
		Options:            options,
	}
	mock.lockUntagResourceWithContext.Lock()
	mock.calls.UntagResourceWithContext = append(mock.calls.UntagResourceWithContext, callInfo)
	mock.lockUntagResourceWithContext.Unlock()
	return mock.UntagResourceWithContextFunc(contextMoqParam, untagResourceInput, options...)
}

// UntagResourceWithContextCalls gets all the calls that were made to UntagResourceWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.UntagResourceWithContextCalls())
func (mock *SecretManagerClientMock) UntagResourceWithContextCalls() []struct {
	ContextMoqParam    context.Context
	UntagResourceInput *secretsmanager.UntagResourceInput
	Options            []request.Option
} {
	var calls []struct {
		ContextMoqParam    context.Context
		UntagResourceInput *secretsmanager.UntagResourceInput
		Options            []request.Option
	}
	mock.lockUntagResourceWithContext.RLock()
	calls = mock.calls.UntagResourceWithContext
	mock.lockUntagResourceWithContext.RUnlock()
	return calls
}

// UpdateSecret calls UpdateSecretFunc.
func (mock *SecretManagerClientMock) UpdateSecret(updateSecretInput *secretsmanager.UpdateSecretInput) (*secretsmanager.UpdateSecretOutput, error) {
	if mock.UpdateSecretFunc == nil {
		panic("SecretManagerClientMock.UpdateSecretFunc: method is nil but SecretManagerClient.UpdateSecret was just called")
	}
	callInfo := struct {
		UpdateSecretInput *secretsmanager.UpdateSecretInput
	}{
		UpdateSecretInput: updateSecretInput,
	}
	mock.lockUpdateSecret.Lock()
	mock.calls.UpdateSecret = append(mock.calls.UpdateSecret, callInfo)
	mock.lockUpdateSecret.Unlock()
	return mock.UpdateSecretFunc(updateSecretInput)
}

// UpdateSecretCalls gets all the calls that were made to UpdateSecret.
// Check the length with:
//
//	len(mockedSecretManagerClient.UpdateSecretCalls())
func (mock *SecretManagerClientMock) UpdateSecretCalls() []struct {
	UpdateSecretInput *secretsmanager.UpdateSecretInput
} {
	var calls []struct {
		UpdateSecretInput *secretsmanager.UpdateSecretInput
	}
	mock.lockUpdateSecret.RLock()
	calls = mock.calls.UpdateSecret
	mock.lockUpdateSecret.RUnlock()
	return calls
}

// UpdateSecretRequest calls UpdateSecretRequestFunc.
func (mock *SecretManagerClientMock) UpdateSecretRequest(updateSecretInput *secretsmanager.UpdateSecretInput) (*request.Request, *secretsmanager.UpdateSecretOutput) {
	if mock.UpdateSecretRequestFunc == nil {
		panic("SecretManagerClientMock.UpdateSecretRequestFunc: method is nil but SecretManagerClient.UpdateSecretRequest was just called")
	}
	callInfo := struct {
		UpdateSecretInput *secretsmanager.UpdateSecretInput
	}{
		UpdateSecretInput: updateSecretInput,
	}
	mock.lockUpdateSecretRequest.Lock()
	mock.calls.UpdateSecretRequest = append(mock.calls.UpdateSecretRequest, callInfo)
	mock.lockUpdateSecretRequest.Unlock()
	return mock.UpdateSecretRequestFunc(updateSecretInput)
}

// UpdateSecretRequestCalls gets all the calls that were made to UpdateSecretRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.UpdateSecretRequestCalls())
func (mock *SecretManagerClientMock) UpdateSecretRequestCalls() []struct {
	UpdateSecretInput *secretsmanager.UpdateSecretInput
} {
	var calls []struct {
		UpdateSecretInput *secretsmanager.UpdateSecretInput
	}
	mock.lockUpdateSecretRequest.RLock()
	calls = mock.calls.UpdateSecretRequest
	mock.lockUpdateSecretRequest.RUnlock()
	return calls
}

// UpdateSecretVersionStage calls UpdateSecretVersionStageFunc.
func (mock *SecretManagerClientMock) UpdateSecretVersionStage(updateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
	if mock.UpdateSecretVersionStageFunc == nil {
		panic("SecretManagerClientMock.UpdateSecretVersionStageFunc: method is nil but SecretManagerClient.UpdateSecretVersionStage was just called")
	}
	callInfo := struct {
		UpdateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput
	}{
		UpdateSecretVersionStageInput: updateSecretVersionStageInput,
	}
	mock.lockUpdateSecretVersionStage.Lock()
	mock.calls.UpdateSecretVersionStage = append(mock.calls.UpdateSecretVersionStage, callInfo)
	mock.lockUpdateSecretVersionStage.Unlock()
	return mock.UpdateSecretVersionStageFunc(updateSecretVersionStageInput)
}

// UpdateSecretVersionStageCalls gets all the calls that were made to UpdateSecretVersionStage.
// Check the length with:
//
//	len(mockedSecretManagerClient.UpdateSecretVersionStageCalls())
func (mock *SecretManagerClientMock) UpdateSecretVersionStageCalls() []struct {
	UpdateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput
} {
	var calls []struct {
		UpdateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput
	}
	mock.lockUpdateSecretVersionStage.RLock()
	calls = mock.calls.UpdateSecretVersionStage
	mock.lockUpdateSecretVersionStage.RUnlock()
	return calls
}

// UpdateSecretVersionStageRequest calls UpdateSecretVersionStageRequestFunc.
func (mock *SecretManagerClientMock) UpdateSecretVersionStageRequest(updateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput) (*request.Request, *secretsmanager.UpdateSecretVersionStageOutput) {
	if mock.UpdateSecretVersionStageRequestFunc == nil {
		panic("SecretManagerClientMock.UpdateSecretVersionStageRequestFunc: method is nil but SecretManagerClient.UpdateSecretVersionStageRequest was just called")
	}
	callInfo := struct {
		UpdateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput
	}{
		UpdateSecretVersionStageInput: updateSecretVersionStageInput,
	}
	mock.lockUpdateSecretVersionStageRequest.Lock()
	mock.calls.UpdateSecretVersionStageRequest = append(mock.calls.UpdateSecretVersionStageRequest, callInfo)
	mock.lockUpdateSecretVersionStageRequest.Unlock()
	return mock.UpdateSecretVersionStageRequestFunc(updateSecretVersionStageInput)
}

// UpdateSecretVersionStageRequestCalls gets all the calls that were made to UpdateSecretVersionStageRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.UpdateSecretVersionStageRequestCalls())
func (mock *SecretManagerClientMock) UpdateSecretVersionStageRequestCalls() []struct {
	UpdateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput
} {
	var calls []struct {
		UpdateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput
	}
	mock.lockUpdateSecretVersionStageRequest.RLock()
	calls = mock.calls.UpdateSecretVersionStageRequest
	mock.lockUpdateSecretVersionStageRequest.RUnlock()
	return calls
}

// UpdateSecretVersionStageWithContext calls UpdateSecretVersionStageWithContextFunc.
func (mock *SecretManagerClientMock) UpdateSecretVersionStageWithContext(contextMoqParam context.Context, updateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput, options ...request.Option) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
	if mock.UpdateSecretVersionStageWithContextFunc == nil {
		panic("SecretManagerClientMock.UpdateSecretVersionStageWithContextFunc: method is nil but SecretManagerClient.UpdateSecretVersionStageWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam               context.Context
		UpdateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput
		Options                       []request.Option
	}{
		ContextMoqParam:               contextMoqParam,
		UpdateSecretVersionStageInput: updateSecretVersionStageInput,
		Options:                       options,
	}
	mock.lockUpdateSecretVersionStageWithContext.Lock()
	mock.calls.UpdateSecretVersionStageWithContext = append(mock.calls.UpdateSecretVersionStageWithContext, callInfo)
	mock.lockUpdateSecretVersionStageWithContext.Unlock()
	return mock.UpdateSecretVersionStageWithContextFunc(contextMoqParam, updateSecretVersionStageInput, options...)
}

// UpdateSecretVersionStageWithContextCalls gets all the calls that were made to UpdateSecretVersionStageWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.UpdateSecretVersionStageWithContextCalls())
func (mock *SecretManagerClientMock) UpdateSecretVersionStageWithContextCalls() []struct {
	ContextMoqParam               context.Context
	UpdateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput
	Options                       []request.Option
} {
	var calls []struct {
		ContextMoqParam               context.Context
		UpdateSecretVersionStageInput *secretsmanager.UpdateSecretVersionStageInput
		Options                       []request.Option
	}
	mock.lockUpdateSecretVersionStageWithContext.RLock()
	calls = mock.calls.UpdateSecretVersionStageWithContext
	mock.lockUpdateSecretVersionStageWithContext.RUnlock()
	return calls
}

// UpdateSecretWithContext calls UpdateSecretWithContextFunc.
func (mock *SecretManagerClientMock) UpdateSecretWithContext(contextMoqParam context.Context, updateSecretInput *secretsmanager.UpdateSecretInput, options ...request.Option) (*secretsmanager.UpdateSecretOutput, error) {
	if mock.UpdateSecretWithContextFunc == nil {
		panic("SecretManagerClientMock.UpdateSecretWithContextFunc: method is nil but SecretManagerClient.UpdateSecretWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam   context.Context
		UpdateSecretInput *secretsmanager.UpdateSecretInput
		Options           []request.Option
	}{
		ContextMoqParam:   contextMoqParam,
		UpdateSecretInput: updateSecretInput,
		Options:           options,
	}
	mock.lockUpdateSecretWithContext.Lock()
	mock.calls.UpdateSecretWithContext = append(mock.calls.UpdateSecretWithContext, callInfo)
	mock.lockUpdateSecretWithContext.Unlock()
	return mock.UpdateSecretWithContextFunc(contextMoqParam, updateSecretInput, options...)
}

// UpdateSecretWithContextCalls gets all the calls that were made to UpdateSecretWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.UpdateSecretWithContextCalls())
func (mock *SecretManagerClientMock) UpdateSecretWithContextCalls() []struct {
	ContextMoqParam   context.Context
	UpdateSecretInput *secretsmanager.UpdateSecretInput
	Options           []request.Option
} {
	var calls []struct {
		ContextMoqParam   context.Context
		UpdateSecretInput *secretsmanager.UpdateSecretInput
		Options           []request.Option
	}
	mock.lockUpdateSecretWithContext.RLock()
	calls = mock.calls.UpdateSecretWithContext
	mock.lockUpdateSecretWithContext.RUnlock()
	return calls
}

// ValidateResourcePolicy calls ValidateResourcePolicyFunc.
func (mock *SecretManagerClientMock) ValidateResourcePolicy(validateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput) (*secretsmanager.ValidateResourcePolicyOutput, error) {
	if mock.ValidateResourcePolicyFunc == nil {
		panic("SecretManagerClientMock.ValidateResourcePolicyFunc: method is nil but SecretManagerClient.ValidateResourcePolicy was just called")
	}
	callInfo := struct {
		ValidateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput
	}{
		ValidateResourcePolicyInput: validateResourcePolicyInput,
	}
	mock.lockValidateResourcePolicy.Lock()
	mock.calls.ValidateResourcePolicy = append(mock.calls.ValidateResourcePolicy, callInfo)
	mock.lockValidateResourcePolicy.Unlock()
	return mock.ValidateResourcePolicyFunc(validateResourcePolicyInput)
}

// ValidateResourcePolicyCalls gets all the calls that were made to ValidateResourcePolicy.
// Check the length with:
//
//	len(mockedSecretManagerClient.ValidateResourcePolicyCalls())
func (mock *SecretManagerClientMock) ValidateResourcePolicyCalls() []struct {
	ValidateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput
} {
	var calls []struct {
		ValidateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput
	}
	mock.lockValidateResourcePolicy.RLock()
	calls = mock.calls.ValidateResourcePolicy
	mock.lockValidateResourcePolicy.RUnlock()
	return calls
}

// ValidateResourcePolicyRequest calls ValidateResourcePolicyRequestFunc.
func (mock *SecretManagerClientMock) ValidateResourcePolicyRequest(validateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput) (*request.Request, *secretsmanager.ValidateResourcePolicyOutput) {
	if mock.ValidateResourcePolicyRequestFunc == nil {
		panic("SecretManagerClientMock.ValidateResourcePolicyRequestFunc: method is nil but SecretManagerClient.ValidateResourcePolicyRequest was just called")
	}
	callInfo := struct {
		ValidateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput
	}{
		ValidateResourcePolicyInput: validateResourcePolicyInput,
	}
	mock.lockValidateResourcePolicyRequest.Lock()
	mock.calls.ValidateResourcePolicyRequest = append(mock.calls.ValidateResourcePolicyRequest, callInfo)
	mock.lockValidateResourcePolicyRequest.Unlock()
	return mock.ValidateResourcePolicyRequestFunc(validateResourcePolicyInput)
}

// ValidateResourcePolicyRequestCalls gets all the calls that were made to ValidateResourcePolicyRequest.
// Check the length with:
//
//	len(mockedSecretManagerClient.ValidateResourcePolicyRequestCalls())
func (mock *SecretManagerClientMock) ValidateResourcePolicyRequestCalls() []struct {
	ValidateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput
} {
	var calls []struct {
		ValidateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput
	}
	mock.lockValidateResourcePolicyRequest.RLock()
	calls = mock.calls.ValidateResourcePolicyRequest
	mock.lockValidateResourcePolicyRequest.RUnlock()
	return calls
}

// ValidateResourcePolicyWithContext calls ValidateResourcePolicyWithContextFunc.
func (mock *SecretManagerClientMock) ValidateResourcePolicyWithContext(contextMoqParam context.Context, validateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput, options ...request.Option) (*secretsmanager.ValidateResourcePolicyOutput, error) {
	if mock.ValidateResourcePolicyWithContextFunc == nil {
		panic("SecretManagerClientMock.ValidateResourcePolicyWithContextFunc: method is nil but SecretManagerClient.ValidateResourcePolicyWithContext was just called")
	}
	callInfo := struct {
		ContextMoqParam             context.Context
		ValidateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput
		Options                     []request.Option
	}{
		ContextMoqParam:             contextMoqParam,
		ValidateResourcePolicyInput: validateResourcePolicyInput,
		Options:                     options,
	}
	mock.lockValidateResourcePolicyWithContext.Lock()
	mock.calls.ValidateResourcePolicyWithContext = append(mock.calls.ValidateResourcePolicyWithContext, callInfo)
	mock.lockValidateResourcePolicyWithContext.Unlock()
	return mock.ValidateResourcePolicyWithContextFunc(contextMoqParam, validateResourcePolicyInput, options...)
}

// ValidateResourcePolicyWithContextCalls gets all the calls that were made to ValidateResourcePolicyWithContext.
// Check the length with:
//
//	len(mockedSecretManagerClient.ValidateResourcePolicyWithContextCalls())
func (mock *SecretManagerClientMock) ValidateResourcePolicyWithContextCalls() []struct {
	ContextMoqParam             context.Context
	ValidateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput
	Options                     []request.Option
} {
	var calls []struct {
		ContextMoqParam             context.Context
		ValidateResourcePolicyInput *secretsmanager.ValidateResourcePolicyInput
		Options                     []request.Option
	}
	mock.lockValidateResourcePolicyWithContext.RLock()
	calls = mock.calls.ValidateResourcePolicyWithContext
	mock.lockValidateResourcePolicyWithContext.RUnlock()
	return calls
}
